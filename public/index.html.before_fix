<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Car Rental Management</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>
    /* Hide all tab panes by default */
    .tab-pane { display: none; }
    /* Only the active tab pane is shown */
    .tab-pane.active { display: block; }
    /* Optional margin for progress bars */
    .progress { margin-bottom: 10px; }
    /* Spanner button style override */
    .spanner-btn { border: none; }
    /* Add to your existing styles */
    .rental-details {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        margin: 10px 0;
    }

    .rental-details p {
        margin-bottom: 0.5rem;
    }

    .rental-details i {
        width: 20px;
        color: #6c757d;
    }

    input[type="datetime-local"] {
        padding: 0.5rem;
    }

    .text-danger {
        animation: blink 1s infinite;
    }

    @keyframes blink {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
    }

    /* Add to your existing styles */
    .rental-form-container {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 2px 15px rgba(0,0,0,0.1);
    }

    .rental-form .form-group {
        margin-bottom: 1.5rem;
    }

    .rental-form label {
        font-weight: 500;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .rental-form .form-control {
        padding: 0.75rem;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .rental-form .form-control:focus {
        border-color: #3498db;
        box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .custom-select {
        height: calc(1.5em + 1.5rem + 2px);
    }

    .btn-primary {
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .highlight-animation {
        animation: highlight-pulse 1.5s ease;
    }

    @keyframes highlight-pulse {
        0% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7); }
        70% { box-shadow: 0 0 0 15px rgba(0, 123, 255, 0); }
        100% { box-shadow: 0 0 0 0 rgba(0, 123, 255, 0); }
    }
    
    /* Dark Mode Styles */
    body.dark-mode {
        background-color: #121212;
        color: #e0e0e0;
    }
    
    body.dark-mode .container {
        background-color: #1e1e1e;
    }
    
    body.dark-mode .card {
        background-color: #2d2d2d;
        border-color: #444;
    }
    
    body.dark-mode .card-header {
        background-color: #333;
        border-color: #444;
    }
    
    body.dark-mode .table {
        color: #e0e0e0;
    }
    
    body.dark-mode .table-striped tbody tr:nth-of-type(odd) {
        background-color: rgba(255, 255, 255, 0.05);
    }
    
    body.dark-mode .table-bordered,
    body.dark-mode .table-bordered td,
    body.dark-mode .table-bordered th {
        border-color: #444;
    }
    
    body.dark-mode .form-control {
        background-color: #333;
        border-color: #555;
        color: #e0e0e0;
    }
    
    body.dark-mode .form-control:focus {
        background-color: #3a3a3a;
        color: #fff;
    }
    
    body.dark-mode .nav-tabs {
        border-color: #444;
    }
    
    body.dark-mode .nav-tabs .nav-link {
        color: #bbb;
    }
    
    body.dark-mode .nav-tabs .nav-link.active {
        background-color: #2d2d2d;
        border-color: #444 #444 #2d2d2d;
        color: #fff;
    }
    
    body.dark-mode .modal-content {
        background-color: #2d2d2d;
        border-color: #444;
    }
    
    body.dark-mode .modal-header,
    body.dark-mode .modal-footer {
        border-color: #444;
    }
    
    body.dark-mode .close {
        color: #e0e0e0;
    }
    
    body.dark-mode .rental-details {
        background: #333;
    }
    
    body.dark-mode .rental-form-container {
        background: #2d2d2d;
    }
    
    /* Mobile-friendly adjustments */
    @media (max-width: 768px) {
        .container {
            padding: 10px;
        }
        
        .card {
            margin-bottom: 15px;
        }
        
        .table-responsive {
            overflow-x: auto;
        }
        
        .btn {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
        }
        
        .form-group {
            margin-bottom: 0.75rem;
        }
        
        .modal-dialog {
            margin: 0.5rem;
        }
        
        .nav-tabs .nav-link {
            padding: 0.5rem 0.75rem;
        }
    }
  </style>
</head>
<body>
<div class="container">
  <h1 class="mt-4 text-center">Car Rental Management System</h1>
  <!-- Navigation Tabs -->
  <ul class="nav nav-tabs" id="appTabs">
    <li class="nav-item">
      <a class="nav-link active" data-target="#dashboardTab" href="#">Dashboard</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#carsTab" href="#">Cars</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#rentalsTab" href="#">Rentals</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#remindersTab" href="#">Reminders</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#dataTab" href="#">Data</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#marketingTab" href="#">Marketing</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#financesTab" href="#">Finances</a>
    </li>
    <li class="nav-item">
      <a class="nav-link" data-target="#settingsTab" href="#">Settings</a>
    </li>
  </ul>
  
  <!-- Tab Content -->
  <div class="tab-content mt-4">
    <!-- Dashboard Tab -->
    <div id="dashboardTab" class="tab-pane active">
      <div class="row mb-4">
        <div class="col-md-4">
          <div class="card bg-primary text-white">
            <div class="card-body">
              <h5 class="card-title">Total Fleet</h5>
              <h2 class="card-text" id="totalFleet">0</h2>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card bg-success text-white">
            <div class="card-body">
              <h5 class="card-title">Available Cars</h5>
              <h2 class="card-text" id="availableCars">0</h2>
            </div>
          </div>
        </div>
        <div class="col-md-4">
          <div class="card bg-warning text-white">
            <div class="card-body">
              <h5 class="card-title">Active Rentals</h5>
              <h2 class="card-text" id="activeRentals">0</h2>
            </div>
          </div>
        </div>
      </div>

      <div class="row">
        <div class="col-md-6">
          <div class="card">
            <div class="card-header bg-success text-white">
              <h4 class="mb-0">Available Cars</h4>
            </div>
            <div class="card-body" id="availableCarsContent">
              <!-- Available cars will be loaded here -->
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card">
            <div class="card-header bg-warning text-white">
              <h4 class="mb-0">Active Rentals</h4>
            </div>
            <div class="card-body" id="activeRentalsContent">
              <!-- Active rentals will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Cars Tab -->
    <div id="carsTab" class="tab-pane">
      <h3>Add Car</h3>
      <form id="addCarForm" enctype="multipart/form-data">
        <div class="row">
          <div class="col-md-3">
            <div class="form-group">
              <label>Make</label>
              <input type="text" class="form-control" name="make" placeholder="Make" required>
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Model</label>
              <input type="text" class="form-control" name="model" placeholder="Model" required>
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Year</label>
              <input type="number" class="form-control" name="year" placeholder="Year" required>
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Registration</label>
              <input type="text" class="form-control" name="registration" placeholder="Car Registration">
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-3">
            <div class="form-group">
              <label>Mileage</label>
              <input type="number" class="form-control" name="mileage" placeholder="Mileage" required>
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Owner Name</label>
              <input type="text" class="form-control" name="ownerName" placeholder="Owner Name">
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Owner Contact</label>
              <input type="text" class="form-control" name="ownerContact" placeholder="Owner Contact">
            </div>
          </div>
          <div class="col-md-3">
            <div class="form-group">
              <label>Owner Email</label>
              <input type="email" class="form-control" name="ownerEmail" placeholder="Owner Email">
            </div>
          </div>
        </div>
        
        <div class="row">
          <div class="col-md-12">
            <div class="form-group">
              <label>Notes (e.g., 2 keys, special features)</label>
              <textarea class="form-control" name="notes" placeholder="Enter notes about the car"></textarea>
            </div>
          </div>
        </div>
        
        <div class="card mb-3">
          <div class="card-header bg-light">
            <a class="btn btn-link text-dark" data-toggle="collapse" href="#remindersCollapse" role="button" aria-expanded="false">
              <i class="fas fa-bell mr-2"></i> Reminders (Optional)
              <i class="fas fa-chevron-down ml-2"></i>
            </a>
          </div>
          <div class="collapse" id="remindersCollapse">
            <div class="card-body">
              <div class="row">
                <div class="col-md-4">
                  <div class="form-group">
                    <label>Service Due</label>
                    <input type="date" class="form-control" name="serviceDue">
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="form-group">
                    <label>Tax Due</label>
                    <input type="date" class="form-control" name="taxDate">
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="form-group">
                    <label>Insurance Due</label>
                    <input type="date" class="form-control" name="insuranceDate">
                  </div>
                </div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Registration Renewal</label>
                    <input type="date" class="form-control" name="registrationDate">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Tire Change Due</label>
                    <input type="date" class="form-control" name="tireChangeDate">
                  </div>
                </div>
              </div>
              <small class="text-muted">You can add or edit reminders later from the car details page.</small>
            </div>
          </div>
        </div>
        
        <div class="form-group">
          <label>Car Documents (Registration, Insurance, etc.)</label>
          <div class="custom-file">
            <input type="file" class="custom-file-input" id="carDocuments" name="documents" multiple accept="image/*,application/pdf">
            <label class="custom-file-label" for="carDocuments">Choose documents...</label>
          </div>
          <small class="form-text text-muted">You can select multiple documents (images or PDFs)</small>
          <div id="carDocumentPreview" class="mt-3 row">
            <!-- Document previews will be added here -->
          </div>
        </div>
        
        <button type="submit" class="btn btn-primary">Add Car</button>
      </form>
      
      <hr>
      
      <div class="row mb-4">
        <div class="col-md-12">
          <div class="card border-warning">
            <div class="card-header bg-warning text-white">
              <h4 class="mb-0">Upcoming Reminders</h4>
            </div>
            <div class="card-body" id="upcomingRemindersContent">
              <!-- Upcoming reminders will be loaded here -->
            </div>
          </div>
        </div>
      </div>
      
      <h4>All Cars</h4>
      <table class="table table-bordered" id="carsTable">
        <thead>
          <tr>
            <th>Make</th>
            <th>Model</th>
            <th>Year</th>
            <th>Registration</th>
            <th>Mileage</th>
            <th>Owner</th>
            <th>Reminders</th>
            <th>Documents</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    
    <!-- Car Details Modal -->
    <div class="modal fade" id="carDetailsModal" tabindex="-1" role="dialog" aria-labelledby="carDetailsModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="carDetailsModalLabel">Car Details</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="editCarForm" enctype="multipart/form-data">
              <input type="hidden" id="editCarId" name="carId">
              
              <ul class="nav nav-tabs" id="carDetailsTabs">
                <li class="nav-item">
                  <a class="nav-link active" data-toggle="tab" href="#basicInfoTab">Basic Info</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" data-toggle="tab" href="#remindersTab">Reminders</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" data-toggle="tab" href="#documentsTab">Documents</a>
                </li>
              </ul>
              
              <div class="tab-content mt-3">
                <div class="tab-pane fade show active" id="basicInfoTab">
                  <div class="row">
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Make</label>
                        <input type="text" class="form-control" id="editMake" name="make" required>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Model</label>
                        <input type="text" class="form-control" id="editModel" name="model" required>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Year</label>
                        <input type="number" class="form-control" id="editYear" name="year" required>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Registration</label>
                        <input type="text" class="form-control" id="editRegistration" name="registration">
                      </div>
                    </div>
                  </div>
                  
                  <div class="row">
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Mileage</label>
                        <input type="number" class="form-control" id="editMileage" name="mileage" required>
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Owner Name</label>
                        <input type="text" class="form-control" id="editOwnerName" name="ownerName">
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Owner Contact</label>
                        <input type="text" class="form-control" id="editOwnerContact" name="ownerContact">
                      </div>
                    </div>
                    <div class="col-md-3">
                      <div class="form-group">
                        <label>Owner Email</label>
                        <input type="email" class="form-control" id="editOwnerEmail" name="ownerEmail">
                      </div>
                    </div>
                  </div>
                  
                  <div class="form-group mt-3">
                    <label>Basic Info Notes</label>
                    <textarea class="form-control" id="editNotes" name="notes" rows="3" placeholder="Enter any additional information about this car..."></textarea>
                  </div>
                  
                  <div class="card mt-3">
                    <div class="card-header bg-light">
                      <h5 class="mb-0">Quick Reminder</h5>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-6">
                          <div class="form-group">
                            <label>Reminder Message</label>
                            <input type="text" class="form-control" id="quickReminderMessage" placeholder="Enter reminder message...">
                          </div>
                        </div>
                        <div class="col-md-4">
                          <div class="form-group">
                            <label>Due Date</label>
                            <input type="date" class="form-control" id="quickReminderDate">
                          </div>
                        </div>
                        <div class="col-md-2">
                          <div class="form-group">
                            <label>&nbsp;</label>
                            <button type="button" class="btn btn-primary btn-block" id="addQuickReminderBtn">Add</button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div class="card mt-3">
                    <div class="card-header bg-light">
                      <h5 class="mb-0">Owner Information</h5>
                    </div>
                    <div class="card-body">
                      <div class="row">
                        <div class="col-md-4">
                          <div class="form-group">
                            <label><i class="fas fa-user mr-2"></i>Name</label>
                            <p class="form-control-static" id="ownerNameDisplay">-</p>
                          </div>
                        </div>
                        <div class="col-md-4">
                          <div class="form-group">
                            <label><i class="fas fa-phone mr-2"></i>Contact</label>
                            <p class="form-control-static" id="ownerContactDisplay">-</p>
                          </div>
                        </div>
                        <div class="col-md-4">
                          <div class="form-group">
                            <label><i class="fas fa-envelope mr-2"></i>Email</label>
                            <p class="form-control-static" id="ownerEmailDisplay">-</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="tab-pane fade" id="remindersTab">
                  <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5>Car Reminders</h5>
                    <button type="button" class="btn btn-sm btn-primary" id="addCarReminderBtn">
                      <i class="fas fa-plus-circle"></i> Add Reminder
                    </button>
                  </div>
                  
                  <div class="table-responsive">
                    <table class="table table-striped table-hover" id="carRemindersTable">
                      <thead>
                        <tr>
                          <th>Title</th>
                          <th>Category</th>
                          <th>Due Date</th>
                          <th>Priority</th>
                          <th>Status</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        <!-- Car-specific reminders will be loaded here -->
                      </tbody>
                    </table>
                  </div>
                  
                  <div class="alert alert-info mt-3">
                    <i class="fas fa-info-circle"></i> These reminders will also appear in the main Reminders tab where you can manage all reminders in one place.
                  </div>
                </div>
                
                <div class="tab-pane fade" id="documentsTab">
                  <div class="form-group">
                    <label>Upload New Documents</label>
                    <div class="custom-file">
                      <input type="file" class="custom-file-input" id="editCarDocuments" name="documents" multiple accept="image/*,application/pdf">
                      <label class="custom-file-label" for="editCarDocuments">Choose documents...</label>
                    </div>
                  </div>
                  
                  <div class="row mt-3">
                    <div class="col-md-12">
                      <h5>Existing Documents</h5>
                      <div id="existingDocumentsContainer" class="row">
                        <!-- Existing documents will be loaded here -->
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Save Changes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Add Custom Reminder Modal -->
    <div class="modal fade" id="addCustomReminderModal" tabindex="-1" role="dialog" aria-labelledby="addCustomReminderModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addCustomReminderModalLabel">Add Custom Reminder</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="customReminderForm">
              <input type="hidden" id="customReminderCarId" name="carId">
              
              <div class="form-group">
                <label>Reminder Type</label>
                <select class="form-control" id="customReminderType" name="type" required>
                  <option value="custom">Custom</option>
                  <option value="service">Service</option>
                  <option value="tax">Tax</option>
                  <option value="insurance">Insurance</option>
                  <option value="tireChange">Tire Change</option>
                  <option value="registration">Registration</option>
                </select>
              </div>
              
              <div class="form-group">
                <label>Date</label>
                <input type="date" class="form-control" id="customReminderDate" name="date" required>
              </div>
              
              <div class="form-group">
                <label>Message</label>
                <textarea class="form-control" id="customReminderMessage" name="message" required></textarea>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" id="saveCustomReminderBtn">Save Reminder</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Rentals Tab -->
    <div id="rentalsTab" class="tab-pane">
      <div class="rental-form-container">
        <h3 class="mb-4">Add New Rental</h3>
        <form id="addRentalForm" class="rental-form">
          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="fas fa-car mr-2"></i>Select Car</label>
                <select class="form-control custom-select" name="car" required>
                  <option value="">Choose a car...</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="fas fa-money-bill mr-2"></i>Rental Fee</label>
                <div class="input-group">
                  <div class="input-group-prepend">
                    <span class="input-group-text currency-symbol">£</span>
                  </div>
                  <input type="number" class="form-control" name="rentalFee" placeholder="Enter rental fee" required>
                </div>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="far fa-calendar-alt mr-2"></i>Start Date & Time</label>
                <input type="datetime-local" class="form-control" name="rentalDate" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="far fa-calendar-alt mr-2"></i>Return Date & Time</label>
                <input type="datetime-local" class="form-control" name="returnDate" required>
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="far fa-user mr-2"></i>Customer Name</label>
                <input type="text" class="form-control" name="customerName" placeholder="Enter customer name" required>
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="far fa-id-card mr-2"></i>Customer ID/Reg</label>
                <input type="text" class="form-control" name="customerReg" placeholder="Enter customer ID/registration">
              </div>
            </div>
          </div>

          <div class="row">
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="far fa-envelope mr-2"></i>Customer Email</label>
                <input type="email" class="form-control" name="customerEmail" placeholder="Enter customer email">
              </div>
            </div>
            <div class="col-md-6">
              <div class="form-group">
                <label><i class="fas fa-phone mr-2"></i>Customer Phone</label>
                <input type="tel" class="form-control" name="customerNumber" placeholder="Enter customer phone">
              </div>
            </div>
          </div>

          <div class="form-group">
            <label><i class="fas fa-file-upload mr-2"></i>Customer Documents (License, ID, etc.)</label>
            <div class="custom-file">
              <input type="file" class="custom-file-input" id="rentalDocuments" name="documents" multiple accept="image/*">
              <label class="custom-file-label" for="rentalDocuments">Choose documents...</label>
            </div>
            <small class="form-text text-muted">You can select multiple documents/images</small>
            <div id="documentPreview" class="mt-3 row">
              <!-- Document previews will be added here -->
            </div>
          </div>

          <div class="form-group">
            <label><i class="far fa-sticky-note mr-2"></i>Notes</label>
            <textarea class="form-control" name="note" rows="3" placeholder="Add any additional notes"></textarea>
          </div>

          <button type="submit" class="btn btn-primary btn-block">
            <i class="fas fa-plus-circle mr-2"></i>Create Rental
          </button>
        </form>
      </div>

      <div class="rentals-list mt-5">
        <h3 class="mb-4">Rental Records</h3>
        
        <!-- Rental records navigation tabs -->
        <ul class="nav nav-tabs mb-3" id="rentalsRecordTabs">
          <li class="nav-item">
            <a class="nav-link active" id="all-rentals-tab" data-toggle="tab" href="#allRentalsTab">All Rentals</a>
          </li>
        </ul>
        
        <!-- Tab content -->
        <div class="tab-content" id="rentalsRecordTabContent">
          <!-- All Rentals Tab -->
          <div class="tab-pane show active" id="allRentalsTab">
            <div class="mb-3">
              <div class="form-row align-items-center">
                <div class="col-auto">
                  <label class="mr-2">Filter by:</label>
                </div>
                <div class="col-auto">
                  <select id="rentalStatusFilter" class="form-control form-control-sm">
                    <option value="all">All Statuses</option>
                    <option value="active">Active</option>
                    <option value="completed">Completed</option>
                    <option value="overdue">Overdue</option>
                  </select>
                </div>
                <div class="col-auto">
                  <input type="text" id="rentalSearchFilter" class="form-control form-control-sm" placeholder="Search (car, customer, reg, email)">
                </div>
                <div class="col-auto">
                  <button id="applyRentalFilters" class="btn btn-sm btn-primary">Apply</button>
                  <button id="resetRentalFilters" class="btn btn-sm btn-secondary">Reset</button>
                </div>
                <div class="col-auto ml-auto">
                  <button id="exportRentals" class="btn btn-sm btn-success">
                    <i class="fas fa-file-export mr-1"></i> Export for Analysis
                  </button>
                </div>
              </div>
            </div>
            <div class="table-responsive">
              <table class="table table-striped" id="allRentalsTable">
                <thead>
                  <tr>
                    <th>Car</th>
                    <th>Customer</th>
                    <th>Contact</th>
                    <th>Start Date</th>
                    <th>Return Date</th>
                    <th>Rental Fee</th>
                    <th>Duration</th>
                    <th>Time Remaining</th>
                    <th>Documents & Notes</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Reminders Tab -->
    <div id="remindersTab" class="tab-pane">
      <div class="row mb-4">
        <div class="col-md-12">
          <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
              <h4 class="mb-0">Reminders</h4>
              <button class="btn btn-light" id="addNewReminderBtn">
                <i class="fas fa-plus-circle"></i> Add New Reminder
              </button>
            </div>
            <div class="card-body">
              <!-- Reminders filtering options -->
              <div class="mb-3">
                <div class="form-row align-items-center">
                  <div class="col-auto">
                    <label class="mr-2">Filter by:</label>
                  </div>
                  <div class="col-md-2">
                    <select id="reminderTypeFilter" class="form-control form-control-sm">
                      <option value="all">All Types</option>
                      <option value="car">Car Related</option>
                      <option value="business">Business</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                  <div class="col-md-2">
                    <select id="reminderCategoryFilter" class="form-control form-control-sm">
                      <option value="all">All Categories</option>
                      <option value="service">Service</option>
                      <option value="tax">Tax</option>
                      <option value="insurance">Insurance</option>
                      <option value="tireChange">Tire Change</option>
                      <option value="registration">Registration</option>
                      <option value="meeting">Meeting</option>
                      <option value="payment">Payment</option>
                      <option value="custom">Custom</option>
                    </select>
                  </div>
                  <div class="col-md-2">
                    <select id="reminderStatusFilter" class="form-control form-control-sm">
                      <option value="all">All Statuses</option>
                      <option value="pending">Pending</option>
                      <option value="completed">Completed</option>
                    </select>
                  </div>
                  <div class="col-md-3">
                    <input type="text" id="reminderSearchFilter" class="form-control form-control-sm" placeholder="Search reminders...">
                  </div>
                  <div class="col-auto">
                    <button id="applyReminderFilters" class="btn btn-sm btn-primary">Apply</button>
                    <button id="resetReminderFilters" class="btn btn-sm btn-secondary">Reset</button>
                  </div>
                </div>
              </div>
              
              <!-- Reminders table -->
              <div class="table-responsive">
                <table class="table table-striped table-hover" id="remindersTable">
                  <thead>
                    <tr>
                      <th>Title</th>
                      <th>Type</th>
                      <th>Category</th>
                      <th>Due Date</th>
                      <th>Priority</th>
                      <th>Status</th>
                      <th>Related To</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Reminders will be loaded here -->
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Upcoming reminders section -->
      <div class="row">
        <div class="col-md-6">
          <div class="card">
            <div class="card-header bg-warning text-white">
              <h4 class="mb-0">Upcoming Reminders (Next 7 Days)</h4>
            </div>
            <div class="card-body" id="upcomingRemindersShort">
              <!-- Upcoming reminders will be loaded here -->
            </div>
          </div>
        </div>
        <div class="col-md-6">
          <div class="card">
            <div class="card-header bg-info text-white">
              <h4 class="mb-0">This Month's Reminders</h4>
            </div>
            <div class="card-body" id="upcomingRemindersMonth">
              <!-- This month's reminders will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Data Tab -->
    <div id="dataTab" class="tab-pane">
      <h3>Rental Logs</h3>
      <div class="mb-3">
        <div class="form-row align-items-center">
          <div class="col-auto">
            <label class="mr-2">Filter by:</label>
          </div>
          <div class="col-auto">
            <select id="dataStatusFilter" class="form-control form-control-sm">
              <option value="all">All Statuses</option>
              <option value="active">Active</option>
              <option value="completed">Completed</option>
              <option value="overdue">Overdue</option>
            </select>
          </div>
          <div class="col-auto">
            <input type="text" id="dataSearchFilter" class="form-control form-control-sm" placeholder="Search (car, customer, reg, email)">
          </div>
          <div class="col-auto">
            <button id="applyDataFilters" class="btn btn-sm btn-primary">Apply</button>
            <button id="resetDataFilters" class="btn btn-sm btn-secondary">Reset</button>
          </div>
          <div class="col-auto ml-auto">
            <button id="exportData" class="btn btn-sm btn-success">
              <i class="fas fa-file-export mr-1"></i> Export Data
            </button>
          </div>
        </div>
      </div>
      <table class="table table-bordered" id="logsTable">
        <thead>
          <tr>
            <th>Status</th>
            <th>Car</th>
            <th>Customer</th>
            <th>Contact</th>
            <th>From Date</th>
            <th>To Date</th>
            <th>Duration</th>
            <th>Price</th>
            <th>Rating</th>
            <th>Documents & Notes</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
    
    <!-- Marketing Tab -->
    <div id="marketingTab" class="tab-pane">
      <h3>Marketing (Good Customers)</h3>
      <div id="marketingCustomers">
        <!-- List of good customers will appear here -->
      </div>
      <hr>
      <h4>Add Marketing Message</h4>
      <form id="addMarketingForm">
        <div class="form-group">
          <textarea class="form-control" name="content" rows="3" placeholder="Write your marketing message here..." required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Add Message</button>
      </form>
      <hr>
      <h4>Marketing Messages</h4>
      <ul class="list-group" id="marketingList"></ul>
    </div>
    
    <!-- Finances Tab -->
    <div id="financesTab" class="tab-pane">
      <h3>Finances</h3>
      <p>Finance management features will be added here.</p>
    </div>
    
    <!-- Settings Tab -->
    <div id="settingsTab" class="tab-pane">
      <div class="container">
        <h3 class="mb-4">System Settings</h3>
        
        <div class="card mb-4">
          <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Global Settings</h5>
          </div>
          <div class="card-body">
            <form id="globalSettingsForm">
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="fas fa-pound-sign mr-2"></i>Currency</label>
                    <select class="form-control" id="currencySetting" name="currency">
                      <option value="£">British Pound (£)</option>
                      <option value="$">US Dollar ($)</option>
                      <option value="€">Euro (€)</option>
                      <option value="¥">Japanese Yen (¥)</option>
                      <option value="₹">Indian Rupee (₹)</option>
                      <option value="ZK">Zambian Kwacha (ZK)</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="far fa-clock mr-2"></i>Date Format</label>
                    <select class="form-control" id="dateFormatSetting" name="dateFormat">
                      <option value="en-GB">DD/MM/YYYY (UK)</option>
                      <option value="en-US">MM/DD/YYYY (US)</option>
                      <option value="iso">YYYY-MM-DD (ISO)</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="far fa-clock mr-2"></i>Time Format</label>
                    <select class="form-control" id="timeFormatSetting" name="timeFormat">
                      <option value="24h">24-hour (14:30)</option>
                      <option value="12h">12-hour (2:30 PM)</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="fas fa-language mr-2"></i>Language</label>
                    <select class="form-control" id="languageSetting" name="language">
                      <option value="en-GB">English (UK)</option>
                      <option value="en-US">English (US)</option>
                    </select>
                  </div>
                </div>
              </div>
              
              <hr>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="fas fa-bell mr-2"></i>Reminder Notification Days</label>
                    <input type="number" class="form-control" id="reminderDaysSetting" name="reminderDays" min="1" max="30" value="7">
                    <small class="form-text text-muted">Number of days before due date to show notifications</small>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label><i class="fas fa-car mr-2"></i>Default Rental Duration (days)</label>
                    <input type="number" class="form-control" id="defaultRentalDurationSetting" name="defaultRentalDuration" min="1" max="365" value="7">
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <div class="custom-control custom-switch">
                  <input type="checkbox" class="custom-control-input" id="darkModeSetting" name="darkMode">
                  <label class="custom-control-label" for="darkModeSetting">Dark Mode</label>
                </div>
              </div>
              
              <div class="form-group">
                <div class="custom-control custom-switch">
                  <input type="checkbox" class="custom-control-input" id="emailNotificationsSetting" name="emailNotifications">
                  <label class="custom-control-label" for="emailNotificationsSetting">Email Notifications</label>
                </div>
              </div>
              
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-save mr-2"></i>Save Settings
              </button>
            </form>
          </div>
        </div>
        
        <div class="card mb-4">
          <div class="card-header bg-info text-white">
            <h5 class="mb-0">Company Information</h5>
          </div>
          <div class="card-body">
            <form id="companyInfoForm">
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Company Name</label>
                    <input type="text" class="form-control" id="companyNameSetting" name="companyName" placeholder="Your Company Name">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Contact Number</label>
                    <input type="tel" class="form-control" id="companyPhoneSetting" name="companyPhone" placeholder="Contact Number">
                  </div>
                </div>
              </div>
              
              <div class="row">
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Email Address</label>
                    <input type="email" class="form-control" id="companyEmailSetting" name="companyEmail" placeholder="Email Address">
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="form-group">
                    <label>Website</label>
                    <input type="url" class="form-control" id="companyWebsiteSetting" name="companyWebsite" placeholder="Website URL">
                  </div>
                </div>
              </div>
              
              <div class="form-group">
                <label>Address</label>
                <textarea class="form-control" id="companyAddressSetting" name="companyAddress" rows="3" placeholder="Company Address"></textarea>
              </div>
              
              <div class="form-group">
                <label>Logo</label>
                <div class="custom-file">
                  <input type="file" class="custom-file-input" id="companyLogoSetting" name="companyLogo" accept="image/*">
                  <label class="custom-file-label" for="companyLogoSetting">Choose logo...</label>
                </div>
              </div>
              
              <button type="submit" class="btn btn-info">
                <i class="fas fa-save mr-2"></i>Save Company Info
              </button>
            </form>
          </div>
        </div>
        
        <div class="card">
          <div class="card-header bg-warning text-white">
            <h5 class="mb-0">Backup & Restore</h5>
          </div>
          <div class="card-body">
            <div class="row">
              <div class="col-md-6">
                <div class="card mb-3">
                  <div class="card-body">
                    <h5 class="card-title">Backup Data</h5>
                    <p class="card-text">Create a backup of all your system data.</p>
                    <button id="backupDataBtn" class="btn btn-warning">
                      <i class="fas fa-download mr-2"></i>Backup Data
                    </button>
                  </div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="card">
                  <div class="card-body">
                    <h5 class="card-title">Restore Data</h5>
                    <p class="card-text">Restore your data from a previous backup.</p>
                    <div class="custom-file mb-3">
                      <input type="file" class="custom-file-input" id="restoreFileSetting" name="restoreFile">
                      <label class="custom-file-label" for="restoreFileSetting">Choose backup file...</label>
                    </div>
                    <button id="restoreDataBtn" class="btn btn-warning">
                      <i class="fas fa-upload mr-2"></i>Restore Data
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal for Early Return / Completing a Rental -->
<div class="modal fade" id="earlyReturnModal" tabindex="-1" role="dialog" aria-labelledby="earlyReturnModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <form id="earlyReturnForm">
        <div class="modal-header">
          <h5 class="modal-title" id="earlyReturnModalLabel">Early Return / Complete Rental</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <input type="hidden" name="rentalId" id="earlyReturnRentalId">
          <div class="form-group">
            <label for="earlyReturnRating">Customer Rating</label>
            <select class="form-control" name="rating" id="earlyReturnRating" required>
              <option value="">Select Rating</option>
              <option value="Good">Good</option>
              <option value="Bad">Bad</option>
            </select>
          </div>
          <div class="form-group">
            <label for="earlyReturnComment">Comment</label>
            <textarea class="form-control" name="comment" id="earlyReturnComment" rows="2" required></textarea>
          </div>
          <div class="form-group">
            <label for="earlyReturnReason">Reason for Ending Rental</label>
            <textarea class="form-control" name="reason" id="earlyReturnReason" rows="2" required></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Submit End Rental</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal for Updating Reminders on a Car -->
<div class="modal fade" id="reminderModal" tabindex="-1" role="dialog" aria-labelledby="reminderModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reminderModalLabel">Add New Reminder</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="reminderForm">
          <input type="hidden" id="reminderId" name="reminderId">
          
          <div class="form-row">
            <div class="form-group col-md-8">
              <label for="reminderTitle">Title*</label>
              <input type="text" class="form-control" id="reminderTitle" name="title" required>
            </div>
            <div class="form-group col-md-4">
              <label for="reminderDate">Due Date*</label>
              <input type="date" class="form-control" id="reminderDate" name="date" required>
            </div>
          </div>
          
          <div class="form-row">
            <div class="form-group col-md-4">
              <label for="reminderType">Type</label>
              <select class="form-control" id="reminderType" name="type">
                <option value="business">Business</option>
                <option value="car">Car Related</option>
                <option value="other">Other</option>
              </select>
            </div>
            <div class="form-group col-md-4">
              <label for="reminderCategory">Category</label>
              <select class="form-control" id="reminderCategory" name="category">
                <option value="custom">Custom</option>
                <option value="service">Service</option>
                <option value="tax">Tax</option>
                <option value="insurance">Insurance</option>
                <option value="tireChange">Tire Change</option>
                <option value="registration">Registration</option>
                <option value="meeting">Meeting</option>
                <option value="payment">Payment</option>
              </select>
            </div>
            <div class="form-group col-md-4">
              <label for="reminderPriority">Priority</label>
              <select class="form-control" id="reminderPriority" name="priority">
                <option value="medium">Medium</option>
                <option value="high">High</option>
                <option value="low">Low</option>
              </select>
            </div>
          </div>
          
          <div class="form-group car-related-field" style="display: none;">
            <label for="reminderCarId">Related Car</label>
            <select class="form-control" id="reminderCarId" name="carId">
              <option value="">-- Select a Car --</option>
              <!-- Cars will be loaded here -->
            </select>
          </div>
          
          <div class="form-group">
            <label for="reminderDescription">Description</label>
            <textarea class="form-control" id="reminderDescription" name="description" rows="3"></textarea>
          </div>
          
          <div class="form-group">
            <label for="reminderNotes">Notes</label>
            <textarea class="form-control" id="reminderNotes" name="notes" rows="2"></textarea>
          </div>
          
          <div class="form-group completed-field" style="display: none;">
            <div class="custom-control custom-checkbox">
              <input type="checkbox" class="custom-control-input" id="reminderCompleted" name="completed">
              <label class="custom-control-label" for="reminderCompleted">Mark as Completed</label>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveReminderBtn">Save Reminder</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for Extending a Rental -->
<div class="modal fade" id="extendRentalModal" tabindex="-1" role="dialog" aria-labelledby="extendRentalModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <form id="extendRentalForm">
        <div class="modal-header">
          <h5 class="modal-title" id="extendRentalModalLabel">Extend Rental</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <input type="hidden" name="rentalId" id="extendRentalId">
          <div class="form-group">
            <label for="extendReturnDate">New Return Date & Time</label>
            <input type="datetime-local" class="form-control" name="newReturnDate" id="extendReturnDate" required>
          </div>
          <div class="form-group">
            <label for="extendReason">Reason for Extension</label>
            <textarea class="form-control" name="reason" id="extendReason" rows="2" required></textarea>
          </div>
          <div class="form-group">
            <label for="extendFee">Additional Fee</label>
            <input type="number" class="form-control" name="additionalFee" id="extendFee" step="0.01" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Extend Rental</button>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal for Adding Notes to a Rental -->
<div class="modal fade" id="addNotesModal" tabindex="-1" role="dialog" aria-labelledby="addNotesModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <form id="addNotesForm">
        <div class="modal-header">
          <h5 class="modal-title" id="addNotesModalLabel">Add Notes to Rental</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <!-- Error message area -->
          <div id="noteError" class="alert alert-danger" style="display: none;"></div>
          
          <input type="hidden" name="rentalId" id="notesRentalId">
          
          <div class="form-group">
            <label for="noteContent">Note Content</label>
            <textarea class="form-control" name="noteContent" id="noteContent" rows="4" required></textarea>
            <small class="form-text text-muted">Enter the details you want to add as a note</small>
          </div>
          
          <div class="form-group">
            <label for="author">Author (Optional)</label>
            <input type="text" class="form-control" id="author" name="author" placeholder="Your name">
            <small class="form-text text-muted">Leave blank to use 'User' as the default</small>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Note</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal for Viewing Notes -->
<div class="modal fade" id="viewNotesModal" tabindex="-1" role="dialog" aria-labelledby="viewNotesModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewNotesModalLabel">Rental Notes</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="notesContent" class="p-3 bg-light rounded">
          <!-- Notes content will be displayed here -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for Viewing Documents -->
<div class="modal fade" id="viewDocumentsModal" tabindex="-1" role="dialog" aria-labelledby="viewDocumentsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewDocumentsModalLabel">Rental Documents</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Documents will be loaded here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- jQuery, Popper.js, and Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script>
  // ---------------------------
  // Utility Functions
  // ---------------------------
  
  // Show alert messages to the user
  function showAlert(message, type = 'info') {
    // Create alert HTML
    const alertHtml = `
      <div class="alert alert-${type} alert-dismissible fade show" role="alert">
        ${message}
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
    `;
    
    // Create alert container if it doesn't exist
    if (!$('#alertContainer').length) {
      $('body').append('<div id="alertContainer" style="position: fixed; top: 70px; right: 20px; z-index: 9999; width: 300px;"></div>');
    }
    
    // Add alert to container
    const $alert = $(alertHtml).appendTo('#alertContainer');
    
    // Auto-dismiss after 5 seconds
    setTimeout(() => {
      $alert.alert('close');
    }, 5000);
  }
  
  // Compute the color class based on the soonest upcoming reminder.
  function getReminderColor(car) {
    const now = new Date();
    let minDiff = Infinity;
    const reminderDates = [];
    if (car.serviceDue) reminderDates.push(new Date(car.serviceDue));
    if (car.tireChangeDate) reminderDates.push(new Date(car.tireChangeDate));
    if (car.registrationDate) reminderDates.push(new Date(car.registrationDate));
    if (car.taxDate) reminderDates.push(new Date(car.taxDate));
    if (car.customReminder && car.customReminder.date) {
      reminderDates.push(new Date(car.customReminder.date));
    }
    reminderDates.forEach(d => {
      if (d > now) {
        const diffDays = (d - now) / (1000 * 60 * 60 * 24);
        if (diffDays < minDiff) {
          minDiff = diffDays;
        }
      }
    });
    if (minDiff === Infinity) {
      return "bg-success"; // No upcoming reminders set
    } else if (minDiff <= 7) {
      return "bg-danger";
    } else if (minDiff <= 30) {
      return "bg-warning";
    } else {
      return "bg-success";
    }
  }
  
  // Load cars and update dropdowns and the cars table with the spanner button.
  function loadCars() {
    console.log('Loading cars for dropdowns...');
    $.get('/api/cars', function(data) {
      console.log('Cars received:', data.length, 'cars');
      let rows = '';
      let options = '<option value="">Select Car</option>';
      data.forEach(function(car) {
        // Determine the spanner button color based on all reminder dates.
        const colorClass = getReminderColor(car);
        rows += `<tr>
          <td>${car.make}</td>
          <td>${car.model}</td>
          <td>${car.year || ''}</td>
          <td>${car.mileage}</td>
          <td>${car.serviceDue ? new Date(car.serviceDue).toLocaleDateString() : ''}</td>
          <td>
            <button class="btn btn-sm spanner-btn ${colorClass} text-white" data-id="${car._id}" data-car='${JSON.stringify(car)}'>
              🔧
            </button>
          </td>
        </tr>`;
        options += `<option value="${car._id}">${car.make} ${car.model} (${car.year || ''})</option>`;
      });
      $('#carsTable tbody').html(rows);
      // Update all car dropdowns (in rentals and finances)
      $('select[name="car"]').html(options);
      console.log('Updated car dropdowns with', data.length, 'options');
    }).fail(function(error) {
      console.error('Failed to load cars:', error);
      alert('Failed to load cars.');
    });
  }
  
  // Load active rentals for Dashboard with progress bars and End Early buttons.
  function loadActiveRentals() {
    $.get('/api/rentals/active', function(rentals) {
      let rentalHtml = '';
      if (rentals.length === 0) {
        rentalHtml = '<div class="p-4 text-center text-muted">No active rentals</div>';
      } else {
        rentals.forEach(rental => {
          const now = new Date().getTime();
          const start = new Date(rental.rentalDate).getTime();
          const end = new Date(rental.returnDate).getTime();
          const progress = Math.min(100, Math.round(((now - start) / (end - start)) * 100));
          const isCompleted = now >= end;
          
          // Calculate time remaining only if not completed
          let timeRemainingHtml = '';
          if (!isCompleted) {
            const timeLeft = end - now;
            const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
            const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
            
            timeRemainingHtml = `
              <small class="text-${timeLeft < 86400000 ? 'danger' : 'info'}">
                Time Remaining: ${daysLeft}d ${hoursLeft}h ${minutesLeft}m
              </small>`;
          }
          
          rentalHtml += `
            <div class="rental-item">
              <div class="d-flex justify-content-between align-items-center">
                <h5>${rental.car && rental.car.make ? `${rental.car.make} ${rental.car.model} (${rental.car.year || ''})` : 'N/A'}</h5>
                <span class="badge badge-${progress >= 100 ? 'danger' : 'success'}">
                  ${progress >= 100 ? 'Completed' : 'Active'}
                </span>
              </div>
              <div class="rental-details">
                <p class="mb-1">
                  <i class="far fa-user mr-2"></i>${rental.customerName}
                </p>
                <p class="mb-1">
                  <i class="far fa-clock mr-2"></i>Start: ${new Date(rental.rentalDate).toLocaleString('en-GB')}
                </p>
                <p class="mb-2">
                  <i class="far fa-clock mr-2"></i>End: ${new Date(rental.returnDate).toLocaleString('en-GB')}
                </p>
                ${timeRemainingHtml}
              </div>
              <div class="progress mt-2 mb-2">
                <div class="progress-bar ${progress >= 100 ? 'bg-danger' : 'bg-success'}" 
                     role="progressbar" 
                     style="width: ${progress}%;" 
                     aria-valuenow="${progress}" 
                     aria-valuemin="0" 
                     aria-valuemax="100">
                  ${progress}%
                </div>
              </div>
              <div class="d-flex justify-content-between align-items-center mt-2">
                <div class="btn-group">
                  ${isCompleted ? `
                    <button class="btn btn-sm btn-danger clear-rental-btn" data-id="${rental._id}" data-completed="true">
                      Clear Rental
                    </button>
                    <button class="btn btn-sm btn-info extend-rental-btn" data-id="${rental._id}">
                      Extend
                    </button>
                    <button class="btn btn-sm btn-secondary add-notes-btn" data-id="${rental._id}">
                      Add Notes
                    </button>
                  ` : `
                    <button class="btn btn-sm btn-success complete-rental-btn" data-id="${rental._id}">
                      Completed
                    </button>
                    <button class="btn btn-sm btn-danger overdue-rental-btn" data-id="${rental._id}">
                      Overdue
                    </button>
                    <button class="btn btn-sm btn-info extend-rental-btn" data-id="${rental._id}">
                      Extend
                    </button>
                    <button class="btn btn-sm btn-secondary add-notes-btn" data-id="${rental._id}">
                      Add Notes
                    </button>
                  `}
                </div>
              </div>
            </div>`;
        });
      }
      $('#activeRentalsContent').html(rentalHtml);
    });
  }
  
  // Load available cars (for Dashboard's available cars section)
  function loadAvailableCars() {
    // Get both cars and active rentals to cross-reference
    $.when(
      $.get('/api/cars'),
      $.get('/api/rentals/active')
    ).done(function(carsResponse, rentalsResponse) {
      const cars = carsResponse[0];
      const activeRentals = rentalsResponse[0];
      
      // Get IDs of cars that are currently rented
      const rentedCarIds = activeRentals.map(rental => rental.car._id);
      
      // Filter out rented cars
      const availableCars = cars.filter(car => !rentedCarIds.includes(car._id));
      
      let availableHtml = '<h4>Available Cars</h4>';
      if (availableCars.length === 0) {
        availableHtml += '<p>No cars available.</p>';
      } else {
        availableHtml += '<ul class="list-group">';
        availableCars.forEach(function(car) {
          availableHtml += `<li class="list-group-item">${car.make} ${car.model} (${car.year || ''})</li>`;
        });
        availableHtml += '</ul>';
      }
      $('#availableCarsContent').html(availableHtml);
    }).fail(function() {
      $('#availableCarsContent').html('<p class="text-danger">Failed to load available cars.</p>');
    });
  }
  
  // Load Dashboard (available cars and active rentals)
  function loadDashboard() {
    console.log('Loading dashboard...'); // Debug log
    
    // Load cars and rentals
    $.when(
        $.get('/api/cars'),
        $.get('/api/rentals/active')
    ).done(function(carsResponse, rentalsResponse) {
        console.log('Data received:', { cars: carsResponse[0], rentals: rentalsResponse[0] }); // Debug log
        
        const cars = carsResponse[0];
        const activeRentals = rentalsResponse[0];
        
        // Get IDs of cars that are currently rented
        const rentedCarIds = activeRentals.map(rental => rental.car._id);
        
        // Filter available cars (not in active rentals)
        const availableCars = cars.filter(car => !rentedCarIds.includes(car._id));
        
        // Update stats
        $('#totalFleet').text(cars.length);
        $('#activeRentals').text(activeRentals.length);
        $('#availableCars').text(availableCars.length);

        // Update available cars list
        let availableCarsHtml = '';
        if (availableCars.length === 0) {
            availableCarsHtml = '<div class="alert alert-info">No cars available at the moment</div>';
        } else {
            availableCarsHtml = '<div class="list-group">';
            availableCars.forEach(car => {
                availableCarsHtml += `
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-1">${car.make} ${car.model} (${car.year || ''})</h5>
                                <small class="text-muted">Mileage: ${car.mileage} km</small>
                            </div>
                            <button class="btn btn-sm btn-success rent-now-btn" data-id="${car._id}">
                                Rent Now
                            </button>
                        </div>
                    </div>`;
            });
            availableCarsHtml += '</div>';
        }
        $('#availableCarsContent').html(availableCarsHtml);

        // Update active rentals list
        let activeRentalsHtml = '';
        if (activeRentals.length === 0) {
            activeRentalsHtml = '<div class="alert alert-info">No active rentals at the moment</div>';
        } else {
            activeRentalsHtml = '<div class="list-group">';
            activeRentals.forEach(rental => {
                const now = new Date().getTime();
                const start = new Date(rental.rentalDate).getTime();
                const end = new Date(rental.returnDate).getTime();
                const progress = Math.min(100, Math.round(((now - start) / (end - start)) * 100));
                const isCompleted = now >= end;
                
                // Calculate time remaining only if not completed
                let timeRemainingHtml = '';
                if (!isCompleted) {
                    const timeLeft = end - now;
                    const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
                    const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutesLeft = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
                    
                    timeRemainingHtml = `
                        <small class="text-${timeLeft < 86400000 ? 'danger' : 'info'}">
                            Time Remaining: ${daysLeft}d ${hoursLeft}h ${minutesLeft}m
                        </small>`;
                }
                
                activeRentalsHtml += `
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h5 class="mb-0">${rental.car && rental.car.make ? `${rental.car.make} ${rental.car.model} (${rental.car.year || ''})` : 'N/A'}</h5>
                            <span class="badge badge-${isCompleted ? 'danger' : 'success'}">
                                ${isCompleted ? 'Completed' : 'Active'}
                            </span>
                        </div>
                        <p class="mb-2">
                            <strong>Customer:</strong> ${rental.customerName}<br>
                            <strong>Start:</strong> ${new Date(rental.rentalDate).toLocaleString('en-GB')}<br>
                            <strong>End:</strong> ${new Date(rental.returnDate).toLocaleString('en-GB')}
                        </p>
                        <div class="progress mb-2">
                            <div class="progress-bar ${isCompleted ? 'bg-danger' : 'bg-success'}" 
                                role="progressbar" 
                                style="width: ${progress}%;" 
                                aria-valuenow="${progress}" 
                                aria-valuemin="0" 
                                aria-valuemax="100">
                                ${progress}%
                            </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            ${timeRemainingHtml}
                            <div class="btn-group">
                                ${isCompleted ? `
                                    <button class="btn btn-danger btn-sm clear-rental-btn" data-id="${rental._id}" data-completed="true">
                                        Clear Rental
                                    </button>
                                    <button class="btn btn-info btn-sm extend-rental-btn" data-id="${rental._id}">
                                        Extend
                                    </button>
                                    <button class="btn btn-secondary btn-sm add-notes-btn" data-id="${rental._id}">
                                        Add Notes
                                    </button>
                                ` : `
                                    <button class="btn btn-success btn-sm complete-rental-btn" data-id="${rental._id}">
                                        Completed
                                    </button>
                                    <button class="btn btn-danger btn-sm overdue-rental-btn" data-id="${rental._id}">
                                        Overdue
                                    </button>
                                    <button class="btn btn-info btn-sm extend-rental-btn" data-id="${rental._id}">
                                        Extend
                                    </button>
                                    <button class="btn btn-secondary btn-sm add-notes-btn" data-id="${rental._id}">
                                        Add Notes
                                    </button>
                                `}
                            </div>
                        </div>
                    </div>`;
            });
            activeRentalsHtml += '</div>';
        }
        $('#activeRentalsContent').html(activeRentalsHtml);
    }).fail(function(error) {
        console.error('Error loading dashboard:', error);
        $('#availableCarsContent').html('<div class="alert alert-danger">Failed to load available cars</div>');
        $('#activeRentalsContent').html('<div class="alert alert-danger">Failed to load active rentals</div>');
    });
  }
  
  // Load all rentals for the Rentals tab tables
  function loadRentals() {
    console.log('Loading rentals...');
    
    // Get all rentals
    $.get('/api/rentals', function(rentals) {
      console.log('Rentals data received:', rentals);
      
      // Clear existing table
      $('#allRentalsTable tbody').empty();
      
      // Current time for calculations
      const now = new Date().getTime();
      const oneDayMs = 24 * 60 * 60 * 1000; // 24 hours in milliseconds
      
      // Store all rentals for filtering
      window.allRentals = rentals.map(rental => {
        // Calculate rental status
        const end = new Date(rental.returnDate).getTime();
        const timeLeft = end - now;
        
        let status;
        let statusClass;
        
        if (!rental.active) {
          status = 'Completed';
          statusClass = 'danger'; // Red for completed
        } else if (timeLeft <= 0) {
          status = 'Overdue';
          statusClass = 'danger'; // Red for overdue
        } else if (timeLeft <= oneDayMs) {
          status = 'Ending Soon';
          statusClass = 'warning'; // Amber for ending soon
        } else {
          status = 'Active';
          statusClass = 'success'; // Green for active
        }
        
        return {
          ...rental,
          calculatedStatus: status,
          statusClass: statusClass,
          timeLeft: timeLeft
        };
      });
      
      console.log('Processed rentals with status:', window.allRentals.length);
      
      // Function to render rentals with optional filters
      const renderRentals = (rentals, filter = null) => {
        // Clear the table first
        $('#allRentalsTable tbody').empty();
        
        if (rentals.length === 0) {
          $('#allRentalsTable tbody').html('<tr><td colspan="9" class="text-center">No rentals found</td></tr>');
          return;
        }
        
        let filtered = rentals;
        
        // Apply filter if provided
        if (filter) {
          filtered = rentals.filter(rental => {
            if (filter === 'active' && rental.calculatedStatus !== 'Completed') return true;
            if (filter === 'completed' && rental.calculatedStatus === 'Completed') return true;
            if (filter === 'overdue' && rental.calculatedStatus === 'Overdue') return true;
            if (filter === 'ending-soon' && rental.calculatedStatus === 'Ending Soon') return true;
            return filter === 'all';
          });
        }
        
        // Render each rental
        filtered.forEach(rental => {
          const carInfo = rental.car ? `${rental.car.make} ${rental.car.model} (${rental.car.year || ''})` : 'N/A';
          const contactInfo = rental.customerNumber || rental.customerEmail || 'N/A';
          
          // Calculate duration in days
          const start = new Date(rental.rentalDate).getTime();
          const end = new Date(rental.returnDate).getTime();
          const durationDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
          
          // Format time remaining
          let timeRemaining;
          if (rental.calculatedStatus === 'Completed') {
            timeRemaining = 'Completed';
          } else if (rental.timeLeft <= 0) {
            timeRemaining = `Overdue by ${Math.abs(Math.ceil(rental.timeLeft / oneDayMs))} days`;
          } else {
            timeRemaining = `${Math.ceil(rental.timeLeft / oneDayMs)} days left`;
          }
          
          // Count documents and prepare notes display
          const documentsCount = rental.documents ? rental.documents.length : 0;
          const hasNotes = rental.note && rental.note.trim() !== '';
          
          // Prepare documents and notes column content
          let docsNotesHtml = '';
          if (documentsCount > 0 || hasNotes) {
            docsNotesHtml = `
              <div class="d-flex flex-column">
                ${documentsCount > 0 ? `
                  <button class="btn btn-sm btn-info mb-1 view-documents-btn" data-id="${rental._id}">
                    <i class="fas fa-file mr-1"></i> ${documentsCount} Document${documentsCount !== 1 ? 's' : ''}
                  </button>` : ''}
                ${hasNotes ? `
                  <button class="btn btn-sm btn-secondary mb-1 view-notes-btn" data-id="${rental._id}" data-notes="${rental.note || ''}">
                    <i class="fas fa-sticky-note mr-1"></i> View Notes
                  </button>` : ''}
                <button class="btn btn-sm btn-outline-secondary add-notes-btn" data-id="${rental._id}">
                  <i class="fas fa-plus-circle mr-1"></i> Add Note
                </button>
              </div>`;
          } else {
            docsNotesHtml = `
              <div class="d-flex flex-column">
                <button class="btn btn-sm btn-outline-secondary add-notes-btn" data-id="${rental._id}">
                  <i class="fas fa-plus-circle mr-1"></i> Add Note
                </button>
              </div>`;
          }
          
          // Determine if rental is completed
          const isCompleted = rental.calculatedStatus === 'Completed';
          const isActive = rental.calculatedStatus === 'Active' || rental.calculatedStatus === 'Ending Soon';
          const isOverdue = rental.calculatedStatus === 'Overdue';
          
          // Add table row
          const row = `<tr class="rental-row ${isCompleted ? 'text-muted' : ''}" data-id="${rental._id}">
            <td>${carInfo}</td>
            <td>${rental.customerName}</td>
            <td>${contactInfo}</td>
            <td>${new Date(rental.rentalDate).toLocaleString(window.dateFormat)}</td>
            <td>${new Date(rental.returnDate).toLocaleString(window.dateFormat)}</td>
            <td>${window.currencySymbol}${rental.rentalFee}</td>
            <td>${durationDays} days</td>
            <td>${timeRemaining}</td>
            <td>${docsNotesHtml}</td>
            <td>
              <div class="dropdown">
                <button class="btn btn-sm ${isCompleted ? 'btn-secondary' : 'btn-primary'} dropdown-toggle" type="button" id="dropdownMenuButton-${rental._id}" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  Actions
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton-${rental._id}">
                  ${isActive ? `
                    <a class="dropdown-item complete-rental-btn" href="#" data-id="${rental._id}">
                      <i class="fas fa-check text-success mr-2"></i>Mark Completed
                    </a>
                    <a class="dropdown-item overdue-rental-btn" href="#" data-id="${rental._id}">
                      <i class="fas fa-exclamation-circle text-danger mr-2"></i>Mark Overdue
                    </a>
                  ` : ''}
                  ${isCompleted ? `
                    <a class="dropdown-item clear-rental-btn" href="#" data-id="${rental._id}" data-completed="true">
                      <i class="fas fa-trash text-danger mr-2"></i>Clear Rental
                    </a>
                  ` : ''}
                  <a class="dropdown-item extend-rental-btn" href="#" data-id="${rental._id}">
                    <i class="fas fa-calendar-plus text-info mr-2"></i>Extend
                  </a>
                  <a class="dropdown-item add-notes-btn" href="#" data-id="${rental._id}">
                    <i class="fas fa-sticky-note text-secondary mr-2"></i>Add Notes
                  </a>
                  <div class="dropdown-divider"></div>
                  <a class="dropdown-item view-rental-btn" href="#" data-id="${rental._id}">
                    <i class="fas fa-eye text-primary mr-2"></i>View Details
                  </a>
                </div>
              </div>
            </td>
          </tr>`;
          
          $('#allRentalsTable tbody').append(row);
        });
      };
      
      // Initial render with all rentals
      renderRentals(window.allRentals);
      
      // Set up filter event handlers
      $(document).off('click', '#applyRentalFilters').on('click', '#applyRentalFilters', function() {
        const statusFilter = $('#rentalStatusFilter').val();
        const searchTerm = $('#rentalSearchFilter').val().trim();
        
        // Filter rentals based on criteria
        let filtered = window.allRentals;
        
        // Apply status filter
        if (statusFilter !== 'all') {
          filtered = filtered.filter(rental => {
            if (statusFilter === 'active') {
              return rental.calculatedStatus === 'Active' || rental.calculatedStatus === 'Ending Soon';
            } else if (statusFilter === 'completed') {
              return rental.calculatedStatus === 'Completed';
            } else if (statusFilter === 'overdue') {
              return rental.calculatedStatus === 'Overdue';
            }
            return true;
          });
        }
        
        // Apply search term if provided
        if (searchTerm !== '') {
          const searchLower = searchTerm.toLowerCase();
          filtered = filtered.filter(rental => {
            // Check car details
            const carInfo = rental.car ? 
              `${rental.car.make} ${rental.car.model} ${rental.car.year || ''}`.toLowerCase() : '';
            
            // Check customer details
            const customerInfo = (rental.customerName || '').toLowerCase() + ' ' +
                               (rental.customerEmail || '').toLowerCase() + ' ' +
                               (rental.customerNumber || '').toLowerCase() + ' ' +
                               (rental.customerReg || '').toLowerCase();
            
            return carInfo.includes(searchLower) || customerInfo.includes(searchLower);
          });
        }
        
        // Render filtered rentals
        renderRentals(filtered);
      });
      
      $(document).off('click', '#resetRentalFilters').on('click', '#resetRentalFilters', function() {
        $('#rentalStatusFilter').val('all');
        $('#rentalSearchFilter').val('');
        renderRentals(window.allRentals);
      });
      
      // Export rentals to CSV
      $(document).off('click', '#exportRentals').on('click', '#exportRentals', function() {
        const statusFilter = $('#rentalStatusFilter').val();
        const searchTerm = $('#rentalSearchFilter').val();
        
        let filteredRentals = window.allRentals;
        
        // Apply status filter
        if (statusFilter !== 'all') {
          filteredRentals = filteredRentals.filter(rental => {
            if (statusFilter === 'active') {
              // Include both Active and Ending Soon in the Active filter
              return rental.calculatedStatus === 'Active' || rental.calculatedStatus === 'Ending Soon';
            } else {
              return rental.calculatedStatus.toLowerCase() === statusFilter.toLowerCase();
            }
          });
        }
        
        // Apply search filter (car, customer, reg, email)
        if (searchTerm.trim() !== '') {
          const search = searchTerm.toLowerCase().trim();
          filteredRentals = filteredRentals.filter(rental => {
            // Check car details
            const carInfo = rental.car ? 
              `${rental.car.make} ${rental.car.model} ${rental.car.year || ''}`.toLowerCase() : '';
            
            // Check customer details
            const customerName = (rental.customerName || '').toLowerCase();
            const customerEmail = (rental.customerEmail || '').toLowerCase();
            const customerReg = (rental.customerReg || '').toLowerCase();
            const customerPhone = (rental.customerNumber || '').toLowerCase();
            
            // Return true if any field contains the search term
            return carInfo.includes(search) || 
                   customerName.includes(search) || 
                   customerEmail.includes(search) || 
                   customerReg.includes(search) ||
                   customerPhone.includes(search);
          });
        }
        
        if (filteredRentals.length === 0) {
          alert('No data to export');
          return;
        }
        
        // Create CSV content
        let csvContent = "data:text/csv;charset=utf-8,";
        csvContent += "Status,Car,Customer,Email,Phone,Start Date,Return Date,Duration (Days),Rental Fee,Rating\n";
        
        filteredRentals.forEach(rental => {
          const carInfo = rental.car 
            ? `${rental.car.make} ${rental.car.model} (${rental.car.year || ''})`
            : 'N/A';
          
          // Calculate rental duration in days
          const start = new Date(rental.rentalDate).getTime();
          const end = new Date(rental.returnDate).getTime();
          const durationMs = end - start;
          const durationDays = Math.ceil(durationMs / (1000 * 60 * 60 * 24));
          
          const row = [
            rental.calculatedStatus,
            carInfo,
            rental.customerName,
            rental.customerEmail || 'N/A',
            rental.customerNumber || 'N/A',
            new Date(rental.rentalDate).toLocaleString('en-GB'),
            new Date(rental.returnDate).toLocaleString('en-GB'),
            durationDays,
            rental.rentalFee,
            rental.rating || 'N/A'
          ];
          
          csvContent += row.map(value => `"${value}"`).join(",") + "\n";
        });
        
        // Create download link
        const encodedUri = encodeURI(csvContent);
        const link = document.createElement("a");
        link.setAttribute("href", encodedUri);
        link.setAttribute("download", `rentals_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        
        // Trigger download
        link.click();
        document.body.removeChild(link);
      });
      
    }).fail(function(error) {
      console.error('Error loading rentals:', error);
      alert('Failed to load rentals.');
    });
  }
  
  // Load logs for Data tab – one row per rental with the required columns.
  function loadData() {
    // Fetch all rentals
    $.get('/api/rentals', function(rentals) {
      // Clear existing table
      $('#logsTable tbody').empty();
      
      if (rentals.length === 0) {
        $('#logsTable tbody').html('<tr><td colspan="10" class="text-center">No rental data available</td></tr>');
        return;
      }
      
      // Get filter values
      const statusFilter = $('#dataStatusFilter').val();
      const searchFilter = $('#dataSearchFilter').val().toLowerCase();
      
      // Filter rentals based on criteria
      const filteredRentals = rentals.filter(rental => {
        // Status filtering
        if (statusFilter !== 'all') {
          const now = new Date();
          const end = new Date(rental.returnDate);
          
          if (statusFilter === 'active' && (!rental.active || end < now)) {
            return false;
          }
          
          if (statusFilter === 'completed' && rental.active) {
            return false;
          }
          
          if (statusFilter === 'overdue' && (!rental.active || end >= now)) {
            return false;
          }
        }
        
        // Search filtering
        if (searchFilter) {
          const carInfo = rental.car ? `${rental.car.make} ${rental.car.model} ${rental.car.registration || ''}`.toLowerCase() : '';
          const customerInfo = `${rental.customerName || ''} ${rental.customerEmail || ''} ${rental.customerReg || ''} ${rental.customerNumber || ''}`.toLowerCase();
          
          if (!carInfo.includes(searchFilter) && !customerInfo.includes(searchFilter)) {
            return false;
          }
        }
        
        return true;
      });
      
      // Populate data table with filtered rentals
      filteredRentals.forEach(rental => {
        // Format dates
        const rentalDate = new Date(rental.rentalDate).toLocaleDateString('en-GB');
        const returnDate = new Date(rental.returnDate).toLocaleDateString('en-GB');
        
        // Calculate duration in days
        const start = new Date(rental.rentalDate);
        const end = new Date(rental.returnDate);
        const durationDays = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
        
        // Determine status
        let status = 'Completed';
        let statusClass = 'success';
        
        if (rental.active) {
          const now = new Date();
          if (end < now) {
            status = 'Overdue';
            statusClass = 'danger';
          } else {
            status = 'Active';
            statusClass = 'primary';
          }
        }
        
        // Format documents and notes
        const documentsCount = rental.documents ? rental.documents.length : 0;
        const hasNotes = rental.note && rental.note.trim() !== '';
        
        let docsNotesHtml = '';
        if (documentsCount > 0 || hasNotes) {
          docsNotesHtml = `
            <div class="d-flex flex-column">
              ${documentsCount > 0 ? `
                <button class="btn btn-sm btn-info mb-1 view-documents-btn" data-id="${rental._id}">
                  <i class="fas fa-file mr-1"></i> ${documentsCount} Document${documentsCount !== 1 ? 's' : ''}
                </button>` : ''}
              ${hasNotes ? `
                <button class="btn btn-sm btn-secondary view-notes-btn" data-id="${rental._id}" data-notes="${rental.note || ''}">
                  <i class="fas fa-sticky-note mr-1"></i> View Notes
              <button class="btn btn-sm btn-outline-secondary add-notes-btn" data-id="${rental._id}">
                <i class="fas fa-plus-circle mr-1"></i> Add Note
              </button>
                </button>` : ''}
            </div>`;
        } else {
          docsNotesHtml = `
            <div class="d-flex flex-column">
              <button class="btn btn-sm btn-outline-secondary add-notes-btn" data-id="${rental._id}">
                <i class="fas fa-plus-circle mr-1"></i> Add Note
              </button>
            </div>`;
        }
        
        // Add row to table
        $('#logsTable tbody').append(`
          <tr>
            <td><span class="badge badge-${statusClass}">${status}</span></td>
            <td>${rental.car ? `${rental.car.make} ${rental.car.model} (${rental.car.registration || rental.car.year})` : 'N/A'}</td>
            <td>${rental.customerName || 'N/A'}</td>
            <td>${rental.customerNumber || 'N/A'}<br>${rental.customerEmail || ''}</td>
            <td>${rentalDate}</td>
            <td>${returnDate}</td>
            <td>${durationDays} days</td>
            <td>${window.currencySymbol}${rental.rentalFee || 'N/A'}</td>
            <td>${rental.rating || 'N/A'}</td>
            <td>${docsNotesHtml}</td>
          </tr>
        `);
      });
    }).fail(function(error) {
      console.error('Error loading data:', error);
      $('#logsTable tbody').html('<tr><td colspan="10" class="text-center">Error loading data</td></tr>');
    });
  }
  
  // ---------------------------
  // Event Handlers
  // ---------------------------
  $(document).ready(function(){
    // Load rentals immediately on page load
    console.log('Document ready, loading rentals and cars...');
    
    // Initialize settings first
    loadSettings();
    
    // First load cars to populate all dropdowns
    $.get('/api/cars', function(cars) {
      console.log('Cars loaded on page init:', cars.length);
      
      // Store car data for future use
      window.carData = cars;
      
      // Create options HTML
      let options = '<option value="">Select Car</option>';
      cars.forEach(function(car) {
        options += `<option value="${car._id}">${car.make} ${car.model} (${car.registration || car.year || ''})</option>`;
      });
      
      // Store options HTML
      window.carOptions = options;
      
      // Update all car dropdowns in the page
      $('select[name="car"]').html(options);
      
      // Now load rentals after cars are loaded
      loadRentals();
    }).fail(function(error) {
      console.error('Failed to load cars on init:', error);
      alert('Failed to load car data. Please refresh the page.');
    });
    
    // Tab switching logic
    $('.nav-link').click(function(e){
      e.preventDefault();
      const target = $(this).data('target');
      $('.nav-link').removeClass('active');
      $(this).addClass('active');
      $('.tab-pane').removeClass('active');
      $(target).addClass('active');
      
      if(target === "#dashboardTab"){
        loadDashboard();
      } else if(target === "#carsTab"){
        updateCarsTable(); // use the renamed function for the cars tab
      } else if(target === "#rentalsTab"){
        // First load cars to ensure dropdown is populated
        $.get('/api/cars', function(cars) {
          console.log('Refreshing car dropdown for rentals tab with', cars.length, 'cars');
          
          // Create options HTML
          let options = '<option value="">Select Car</option>';
          cars.forEach(function(car) {
            options += `<option value="${car._id}">${car.make} ${car.model} (${car.registration || car.year || ''})</option>`;
          });
          
          // Update rental form car dropdown
          $('#addRentalForm select[name="car"]').html(options);
          
          // Then load rentals
          loadRentals();
        }).fail(function(error) {
          console.error('Failed to load cars for rentals tab:', error);
        });
      } else if(target === "#dataTab"){
        loadData();
      } else if(target === "#remindersTab"){
        loadReminders(); // load reminders data
      } else if(target === "#settingsTab"){
        loadSettings(); // load settings data
      }
    });
    
    // Handle Add Car form submission
    $('#addCarForm').submit(function(e){
      e.preventDefault();
      const formData = $(this).serialize();
      $.post('/api/cars', formData, function(response) {
        alert('Car added successfully!');
        $('#addCarForm')[0].reset();
        loadCars();       // refresh Cars tab and update dropdowns
        loadDashboard();  // refresh Dashboard available cars
      }).fail(function() {
        alert('Error adding car.');
      });
    });
    
    // Handle Add Rental form submission
    $('#addRentalForm').submit(function(e) {
      e.preventDefault();
      
      // Create FormData object to handle file uploads
      const formData = new FormData(this);
      
      // Convert date fields to ISO format
      const rentalDate = new Date($('input[name="rentalDate"]').val()).toISOString();
      const returnDate = new Date($('input[name="returnDate"]').val()).toISOString();
      
      // Remove the original date fields and add the formatted ones
      formData.delete('rentalDate');
      formData.delete('returnDate');
      formData.append('rentalDate', rentalDate);
      formData.append('returnDate', returnDate);
      
      console.log('Submitting rental data with documents');
      
      $.ajax({
        url: '/api/rentals',
        method: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function(response) {
          console.log('Rental created successfully:', response);
          $('#addRentalForm')[0].reset();
          $('#documentPreview').empty();
          loadDashboard();
          loadRentals();
          alert('Rental created successfully!');
        },
        error: function(xhr, status, error) {
          console.error('Error creating rental:', xhr.responseText);
          alert('Error creating rental: ' + (xhr.responseJSON?.error || error));
        }
      });
    });
    
    // Handle "Rent Now" button click from dashboard
    $(document).on('click', '.rent-now-btn', function() {
      const carId = $(this).data('id');
      
      // Switch to rentals tab
      $('.nav-link[data-target="#rentalsTab"]').click();
      
      // Pre-select the car in the dropdown
      $('select[name="car"]').val(carId);
      
      // Scroll to the rental form
      $('html, body').animate({
        scrollTop: $("#addRentalForm").offset().top - 100
      }, 500);
      
      // Optional: highlight the form briefly to draw attention
      $('.rental-form-container').addClass('highlight-animation');
      setTimeout(() => {
        $('.rental-form-container').removeClass('highlight-animation');
      }, 1500);
    });
    
    // Delegate click event for the "Complete Rental" button
    $(document).on('click', '.complete-rental-btn', function(){
      const rentalId = $(this).data('id');
      console.log('Complete Rental button clicked for rental ID:', rentalId);
      
      // Reset form fields
      $('#earlyReturnRating').val('');
      $('#earlyReturnComment').val('');
      $('#earlyReturnReason').val('');
      
      // Set rental ID in the form
      $('#earlyReturnRentalId').val(rentalId);
      $('#earlyReturnModalLabel').text('Complete Rental');
      
      // Show the modal
      $('#earlyReturnModal').modal('show');
    });
    
    // Delegate click event for the "Overdue Rental" button
    $(document).on('click', '.overdue-rental-btn', function(){
      const rentalId = $(this).data('id');
      
      if (confirm('Are you sure you want to mark this rental as overdue?')) {
        $.ajax({
          url: `/api/rentals/${rentalId}/overdue`,
          method: 'POST',
          success: function(response) {
            console.log('Rental marked as overdue:', response);
            loadDashboard();
            loadRentals();
            alert('Rental has been marked as overdue.');
          },
          error: function(xhr, status, error) {
            console.error('Error marking rental as overdue:', xhr.responseText);
            alert('Failed to mark rental as overdue: ' + (xhr.responseJSON?.error || error));
          }
        });
      }
    });
    
    // Delegate click event for the spanner icon on a car row (to update reminders)
    $(document).on('click', '.spanner-btn', function(){
      const carId = $(this).data('id');
      const car = JSON.parse($(this).attr('data-car'));
      $('#reminderCarId').val(carId);
      // Pre-populate fixed reminder inputs
      $('#reminderServiceDue').val(car.serviceDue ? new Date(car.serviceDue).toISOString().split('T')[0] : '');
      $('#reminderTireChangeDate').val(car.tireChangeDate ? new Date(car.tireChangeDate).toISOString().split('T')[0] : '');
      $('#reminderRegistrationDate').val(car.registrationDate ? new Date(car.registrationDate).toISOString().split('T')[0] : '');
      $('#reminderTaxDate').val(car.taxDate ? new Date(car.taxDate).toISOString().split('T')[0] : '');
      // Pre-populate custom reminder inputs
      $('#reminderCustomMessage').val(car.customReminder ? car.customReminder.message : '');
      $('#reminderCustomDate').val(car.customReminder && car.customReminder.date ? new Date(car.customReminder.date).toISOString().split('T')[0] : '');
      $('#reminderModal').modal('show');
    });
    
    // Handle Reminder form submission
    $('#reminderForm').submit(function(e) {
      e.preventDefault();
      const carId = $('#reminderCarId').val();
      const formData = $(this).serialize();
      $.post('/api/cars/' + carId + '/reminders', formData, function(response) {
        alert('Reminders updated successfully!');
        $('#reminderModal').modal('hide');
        loadCars(); // reload cars table to update spanner icon color
      }).fail(function() {
        alert('Error updating reminders.');
      });
    });
    
    // Handle Early Return / Complete Rental modal submission
    $('#earlyReturnForm').submit(function(e) {
      e.preventDefault();
      const rentalId = $('#earlyReturnRentalId').val();
      
      // Check if rentalId is valid
      if (!rentalId) {
        console.error('No rental ID found in the form');
        alert('Error: No rental ID found. Please try again.');
        return;
      }
      
      // Get form data
      const rating = $('#earlyReturnRating').val();
      const comment = $('#earlyReturnComment').val();
      const reason = $('#earlyReturnReason').val();
      
      // Validate required fields
      if (!rating || !comment || !reason) {
        console.error('Missing required fields:', { rating, comment, reason });
        alert('Please fill in all required fields');
        return;
      }
      
      const formData = {
        rating: rating,
        comment: comment,
        reason: reason
      };
      
      console.log('Ending rental with ID:', rentalId);
      console.log('Form data:', formData);
      
      // Send the request
      $.ajax({
        url: '/api/rentals/' + rentalId + '/end',
        method: 'POST',
        data: formData,
        success: function(response) {
          console.log('Rental ended successfully:', response);
          $('#earlyReturnModal').modal('hide');
          $('#earlyReturnForm')[0].reset();
          
          // Reload both dashboard and rentals lists
          loadDashboard();
          loadRentals();
          
          alert('Rental completed successfully.');
        },
        error: function(xhr, status, error) {
          console.error('Error ending rental:', xhr.responseText);
          alert('Failed to complete rental: ' + (xhr.responseJSON?.error || error));
        }
      });
    });
    
    // Handle Clear Rental button click
    $(document).on('click', '.clear-rental-btn', function() {
        const rentalId = $(this).data('id');
        const isCompleted = $(this).data('completed');
        
        if (!isCompleted) {
            alert('Cannot clear an active rental. The rental must be completed first.');
            return;
        }
        
        if (confirm('Are you sure you want to clear this rental from the dashboard? The rental data will still be available in reports.')) {
            $.ajax({
                url: `/api/rentals/${rentalId}/clear`,
                method: 'POST',
                success: function() {
                    loadDashboard();
                    alert('Rental cleared from dashboard successfully');
                },
                error: function(xhr) {
                    alert('Error clearing rental: ' + (xhr.responseJSON?.message || 'Unknown error'));
                }
            });
        }
    });

    // Handle Extend Rental button click
    $(document).on('click', '.extend-rental-btn', function() {
        const rentalId = $(this).data('id');
        $('#extendRentalId').val(rentalId);
        $('#extendRentalModal').modal('show');
    });

    // Handle Extend Rental form submission
    $('#extendRentalForm').submit(function(e) {
        e.preventDefault();
        const rentalId = $('#extendRentalId').val();
        const formData = $(this).serialize();
        
        $.ajax({
            url: `/api/rentals/${rentalId}/extend`,
            method: 'POST',
            data: formData,
            success: function() {
                $('#extendRentalModal').modal('hide');
                loadDashboard();
                alert('Rental extended successfully');
            },
            error: function() {
                alert('Error extending rental');
            }
        });
    });
    
    // Handle Add Notes button click
    $(document).on('click', '.add-notes-btn', function() {
        const rentalId = $(this).data('id');
        $('#notesRentalId').val(rentalId);
        $('#noteContent').val('');
        $('#author').val('');
        // Clear any previous error messages
        $('#noteError').hide();
        $('#addNotesModal').modal('show');
    });

    // Handle file input change for image preview
    $('#noteImages').change(function() {
        const files = Array.from(this.files);
        $('#imagePreview').empty();
        
        files.forEach(file => {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    $('#imagePreview').append(`
                        <div class="col-md-4 mb-2">
                            <img src="${e.target.result}" class="img-thumbnail" style="height: 100px; object-fit: cover;">
                        </div>
                    `);
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Update file input label
        $(this).next('.custom-file-label').html(
            files.length > 1 ? `${files.length} files selected` : files[0].name
        );
    });

    // Handle Notes form submission - FIXED VERSION
    $('#addNotesForm').submit(function(e) {
        e.preventDefault();
        console.log("Form submitted");
        
        const rentalId = $('#notesRentalId').val();
        const noteContent = $('#noteContent').val().trim();
        const author = $('#author').val().trim() || 'User';
        
        console.log("Form data:", { rentalId, noteContent, author });
        
        // Validate the note content
        if (!noteContent) {
            $('#noteError').text('Please enter a note').show();
            return;
        }
        
        // Create FormData
        const formData = new FormData();
        formData.append('noteContent', noteContent);
        formData.append('author', author);
        
        console.log("Sending data to:", `/api/rentals/${rentalId}/notes`);
        
        // Disable the submit button and show loading state
        const submitButton = $(this).find('button[type="submit"]');
        const originalText = submitButton.text();
        submitButton.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...');
        
        // Submit the note using AJAX
        $.ajax({
            url: `/api/rentals/${rentalId}/notes`,
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function(response) {
                console.log("Response:", response);
                if (response.success) {
                    // Clear the form
                    $('#noteContent').val('');
                    $('#author').val('');
                    
                    // Close the modal
                    $('#addNotesModal').modal('hide');
                    
                    // Show success alert
                    showAlert('Note added successfully', 'success');
                    
                    // Refresh data
                    if ($('#rentalsTab').hasClass('active')) {
                        loadRentals();
                    } else if ($('#dataTab').hasClass('active')) {
                        loadData();
                    } else {
                        loadDashboard();
                    }
                } else {
                    $('#noteError').text(response.message || 'Error adding note').show();
                }
            },
            error: function(xhr, status, error) {
                console.error("Error:", error);
                console.error("Status:", status);
                console.error("Response:", xhr.responseText);
                
                let errorMsg = 'Error adding note. Please try again.';
                
                try {
                    if (xhr.responseJSON && xhr.responseJSON.message) {
                        errorMsg = xhr.responseJSON.message;
                    } else if (xhr.responseText) {
                        const response = JSON.parse(xhr.responseText);
                        if (response.message) {
                            errorMsg = response.message;
                        }
                    }
                } catch (e) {
                    console.error("Error parsing error response:", e);
                }
                
                $('#noteError').text(errorMsg).show();
            },
            complete: function() {
                // Reset button state
                submitButton.prop('disabled', false).text(originalText);
            }
        });
    });

    // Add CSS for button group spacing
    $('<style>')
        .text(`
            .btn-group .btn {
                margin-left: 2px;
                margin-right: 2px;
            }
            .btn-group .btn:first-child {
                margin-left: 0;
            }
            .btn-group .btn:last-child {
                margin-right: 0;
            }
        `)
        .appendTo('head');

    // Add CSS for notes display
    $('<style>')
        .text(`
            #notesContent {
                max-height: 400px;
                overflow-y: auto;
            }
            #notesContent p {
                margin-bottom: 0.5rem;
                padding-bottom: 0.5rem;
                border-bottom: 1px solid #eee;
            }
            #notesContent p:last-child {
                border-bottom: none;
            }
        `)
        .appendTo('head');

    // Initial load of Dashboard on page load
    loadDashboard();
    
    // Initialize Bootstrap tabs for rental records
    $('#rentalsRecordTabs a').on('click', function(e) {
      e.preventDefault();
      $(this).tab('show');
      
      // Log which tab is being shown
      console.log('Tab shown:', $(this).attr('id'));
      
      // Make sure the tables are populated when switching tabs
      if ($(this).attr('id') === 'active-rentals-tab') {
        const activeRentals = $('#activeRentalsTable tbody tr').length;
        console.log('Active rentals count in table:', activeRentals);
        if (activeRentals === 0 || activeRentals === 1 && $('#activeRentalsTable tbody tr td').length === 1) {
          console.log('No active rentals found in table, reloading...');
          loadRentals();
        }
      
        console.log('Completed rentals tab clicked, checking data...');
        // Check if we need to reload the completed rentals
        const completedRentals = $('#completedRentalsTable tbody tr').length;
        console.log('Completed rentals count in table:', completedRentals);
        
        // If no completed rentals or only a "no rentals" message row, reload
        if (completedRentals === 0 || completedRentals === 1 && $('#completedRentalsTable tbody tr td').length === 1) {
          console.log('No completed rentals found in table or only message row, reloading...');
          loadRentals();
          
          // Ensure the completed rentals tab is properly shown
          setTimeout(function() {
            console.log('Ensuring completed rentals tab is visible...');
            $('#completedRentalsTab').addClass('show active');
          }, 100);
        }
      }
    });

    // Force reload of rentals when switching to rentals tab
    $('.nav-link[data-target="#rentalsTab"]').on('click', function() {
      setTimeout(function() {
        console.log('Forcing reload of rentals...');
        loadRentals();
        
        // Ensure the all rentals tab is shown
        console.log('Forcing all rentals tab to show...');
        $('#all-rentals-tab').tab('show');
        
        // Check if the all rentals tab content is visible
        const isVisible = $('#allRentalsTab').is(':visible');
        console.log('All rentals tab content visible:', isVisible);
        
        // If not visible, try to make it visible
        if (!isVisible) {
          console.log('Trying to make all rentals tab content visible...');
          $('#allRentalsTab').addClass('show active').removeClass('fade');
        }
      }, 100);
    });

    // Handle file input change for document preview in Add Rental form
    
    // Reminders functionality
    
    // Handle Add New Reminder button click
    $(document).on('click', '#addNewReminderBtn', function() {
      // Reset form
      $('#reminderForm')[0].reset();
      $('#reminderId').val('');
      
      // Set default date to today
      const today = new Date().toISOString().split('T')[0];
      $('#reminderDate').val(today);
      
      // Hide completed field for new reminders
      $('.completed-field').hide();
      
      // Update modal title
      $('#reminderModalLabel').text('Add New Reminder');
      
      // Load cars for the dropdown
      loadCarsForReminders();
      
      // Show modal
      $('#reminderModal').modal('show');
    });
    
    // Handle reminder type change
    $(document).on('change', '#reminderType', function() {
      const type = $(this).val();
      
      // Show/hide car selection based on type
      if (type === 'car') {
        $('.car-related-field').show();
      } else {
        $('.car-related-field').hide();
        $('#reminderCarId').val('');
      }
    });
    
    // Handle Edit Reminder button click
    $(document).on('click', '.edit-reminder-btn', function() {
      const reminderId = $(this).data('id');
      
      // Get reminder details
      $.get(`/api/reminders/${reminderId}`, function(reminder) {
        // Populate form
        $('#reminderId').val(reminder._id);
        $('#reminderTitle').val(reminder.title);
        $('#reminderDate').val(new Date(reminder.date).toISOString().split('T')[0]);
        $('#reminderType').val(reminder.type);
        $('#reminderCategory').val(reminder.category);
        $('#reminderPriority').val(reminder.priority);
        $('#reminderDescription').val(reminder.description);
        $('#reminderNotes').val(reminder.notes);
        $('#reminderCompleted').prop('checked', reminder.completed);
        
        // Show/hide car selection based on type
        if (reminder.type === 'car') {
          $('.car-related-field').show();
          $('#reminderCarId').val(reminder.carId || '');
        } else {
          $('.car-related-field').hide();
        }
        
        // Show completed field for existing reminders
        $('.completed-field').show();
        
        // Update modal title
        $('#reminderModalLabel').text('Edit Reminder');
        
        // Load cars for the dropdown
        loadCarsForReminders();
        
        // Show modal
        $('#reminderModal').modal('show');
      }).fail(function(error) {
        console.error('Error loading reminder details:', error);
        alert('Failed to load reminder details');
      });
    });
    
    // Handle Complete Reminder button click
    $(document).on('click', '.complete-reminder-btn', function() {
      const reminderId = $(this).data('id');
      
      if (confirm('Mark this reminder as completed?')) {
        $.ajax({
          url: `/api/reminders/${reminderId}/complete`,
          type: 'POST',
          success: function(response) {
            alert('Reminder marked as completed');
            loadReminders();
          },
          error: function(error) {
            console.error('Error completing reminder:', error);
            alert('Failed to complete reminder');
          }
        });
      }
    });
    
    // Handle Delete Reminder button click
    $(document).on('click', '.delete-reminder-btn', function() {
      const reminderId = $(this).data('id');
      
      if (confirm('Are you sure you want to delete this reminder?')) {
        $.ajax({
          url: `/api/reminders/${reminderId}`,
          type: 'DELETE',
          success: function(response) {
            alert('Reminder deleted successfully');
            loadReminders();
          },
          error: function(error) {
            console.error('Error deleting reminder:', error);
            alert('Failed to delete reminder');
          }
        });
      }
    });
    
    // Handle Save Reminder button click
    $(document).on('click', '#saveReminderBtn', function() {
      // Validate form
      if (!$('#reminderTitle').val() || !$('#reminderDate').val()) {
        alert('Please fill in all required fields');
        return;
      }
      
      const reminderId = $('#reminderId').val();
      const formData = {
        title: $('#reminderTitle').val(),
        date: $('#reminderDate').val(),
        type: $('#reminderType').val(),
        category: $('#reminderCategory').val(),
        priority: $('#reminderPriority').val(),
        description: $('#reminderDescription').val(),
        notes: $('#reminderNotes').val()
      };
      
      // Add car ID if type is car and a car is selected
      if ($('#reminderType').val() === 'car' && $('#reminderCarId').val()) {
        formData.carId = $('#reminderCarId').val();
      }
      
      // Add completed status for existing reminders
      if (reminderId) {
        formData.completed = $('#reminderCompleted').is(':checked');
      }
      
      // Create or update reminder
      const url = reminderId ? `/api/reminders/${reminderId}` : '/api/reminders';
      const method = reminderId ? 'PUT' : 'POST';
      
      $.ajax({
        url: url,
        type: method,
        data: formData,
        success: function(response) {
          alert(reminderId ? 'Reminder updated successfully' : 'Reminder created successfully');
          $('#reminderModal').modal('hide');
          loadReminders();
        },
        error: function(error) {
          console.error('Error saving reminder:', error);
          alert('Failed to save reminder: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
        }
      });
    });
    
    // Handle Apply Reminder Filters button click
    $(document).on('click', '#applyReminderFilters', function() {
      const filters = {
        type: $('#reminderTypeFilter').val(),
        category: $('#reminderCategoryFilter').val(),
        search: $('#reminderSearchFilter').val()
      };
      
      // Handle status filter
      if ($('#reminderStatusFilter').val() === 'pending') {
        filters.completed = false;
      } else if ($('#reminderStatusFilter').val() === 'completed') {
        filters.completed = true;
      }
      
      loadReminders(filters);
    });
    
    // Handle Reset Reminder Filters button click
    $(document).on('click', '#resetReminderFilters', function() {
      $('#reminderTypeFilter').val('all');
      $('#reminderCategoryFilter').val('all');
      $('#reminderStatusFilter').val('all');
      $('#reminderSearchFilter').val('');
      
      loadReminders();
    });
  });

  // Load cars for the Cars tab
  function updateCarsTable() {
    $.get('/api/cars', function(cars) {
      // Update dashboard stats
      $('#totalFleet').text(cars.length);
      $('#availableCars').text(cars.filter(car => !car.isRented).length);
      
      // Clear existing table
      $('#carsTable tbody').empty();
      
      // Populate cars table
      cars.forEach(car => {
        // Format dates for display
        const serviceDue = car.serviceDue ? new Date(car.serviceDue).toLocaleDateString('en-GB') : 'N/A';
        const taxDate = car.taxDate ? new Date(car.taxDate).toLocaleDateString('en-GB') : 'N/A';
        const insuranceDate = car.insuranceDate ? new Date(car.insuranceDate).toLocaleDateString('en-GB') : 'N/A';
        
        // Check if any reminders are due soon (within 30 days)
        const now = new Date();
        const thirtyDaysFromNow = new Date();
        thirtyDaysFromNow.setDate(now.getDate() + 30);
        
        let reminderStatus = 'No reminders';
        let reminderClass = '';
        
        // Check standard date fields
        const dateFields = [
          { type: 'Service', date: car.serviceDue },
          { type: 'Tax', date: car.taxDate },
          { type: 'Insurance', date: car.insuranceDate },
          { type: 'Tire Change', date: car.tireChangeDate },
          { type: 'Registration', date: car.registrationDate }
        ];
        
        // Check if any date is due soon
        for (const field of dateFields) {
          if (field.date) {
            const dueDate = new Date(field.date);
            if (dueDate < now) {
              reminderStatus = `${field.type} Overdue!`;
              reminderClass = 'text-danger font-weight-bold';
              break;
            } else if (dueDate < thirtyDaysFromNow) {
              const daysRemaining = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
              reminderStatus = `${field.type} due in ${daysRemaining} days`;
              reminderClass = 'text-warning font-weight-bold';
              break;
            }
          }
        }
        
        // Check custom reminders if no standard reminders are due
        if (reminderClass === '' && car.reminders && car.reminders.length > 0) {
          for (const reminder of car.reminders) {
            if (!reminder.completed) {
              const dueDate = new Date(reminder.date);
              if (dueDate < now) {
                reminderStatus = `${reminder.type.charAt(0).toUpperCase() + reminder.type.slice(1)} Overdue!`;
                reminderClass = 'text-danger font-weight-bold';
                break;
              } else if (dueDate < thirtyDaysFromNow) {
                const daysRemaining = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
                reminderStatus = `${reminder.type.charAt(0).toUpperCase() + reminder.type.slice(1)} due in ${daysRemaining} days`;
                reminderClass = 'text-warning font-weight-bold';
                break;
              }
            }
          }
        }
        
        // Count documents
        const documentsCount = car.documents ? car.documents.length : 0;
        
        // Format owner info
        const ownerInfo = car.owner && car.owner.name ? car.owner.name : 'N/A';
        
        // Add row to table
        $('#carsTable tbody').append(`
          <tr>
            <td>${car.make}</td>
            <td>${car.model}</td>
            <td>${car.year || 'N/A'}</td>
            <td>${car.registration || 'N/A'}</td>
            <td>${car.mileage || 'N/A'}</td>
            <td>${ownerInfo}</td>
            <td class="${reminderClass}">${reminderStatus}</td>
            <td>${documentsCount > 0 ? `${documentsCount} document(s)` : 'None'}</td>
            <td>
              <button class="btn btn-sm btn-info view-car-btn" data-id="${car._id}">View/Edit</button>
              <button class="btn btn-sm btn-danger delete-car-btn" data-id="${car._id}">Delete</button>
            </td>
          </tr>
        `);
      });
    }).fail(function(error) {
      console.error('Error loading cars:', error);
      $('#carsTable tbody').html('<tr><td colspan="9" class="text-center">Failed to load cars</td></tr>');
    });
    
    // Load upcoming reminders
    loadUpcomingReminders();
  }
  
  // Load upcoming reminders for the Cars tab
  function loadUpcomingReminders() {
    $.get('/api/cars/reminders/upcoming', function(reminders) {
      const container = $('#upcomingRemindersContent');
      
      if (reminders.length === 0) {
        container.html('<div class="alert alert-info">No upcoming reminders</div>');
        return;
      }
      
      let html = '<div class="list-group">';
      
      reminders.forEach(reminder => {
        const daysText = reminder.daysRemaining === 1 ? 'day' : 'days';
        const reminderClass = reminder.daysRemaining <= 7 ? 'list-group-item-danger' : 'list-group-item-warning';
        
        html += `
          <div class="list-group-item ${reminderClass} d-flex justify-content-between align-items-center">
            <div>
              <strong>${reminder.carInfo}</strong>: 
              ${reminder.message || `${reminder.type.charAt(0).toUpperCase() + reminder.type.slice(1)} due`}
              <br>
              <small>Due date: ${new Date(reminder.date).toLocaleDateString('en-GB')}</small>
            </div>
            <span class="badge badge-pill badge-warning">${reminder.daysRemaining} ${daysText}</span>
          </div>
        `;
      });
      
      html += '</div>';
      container.html(html);
    }).fail(function(error) {
      console.error('Error loading upcoming reminders:', error);
      $('#upcomingRemindersContent').html('<div class="alert alert-danger">Failed to load reminders</div>');
    });
  }
  
  // Handle car document file selection
  $(document).on('change', '#carDocuments', function(e) {
    const files = e.target.files;
    const previewContainer = $('#carDocumentPreview');
    
    // Clear previous previews
    previewContainer.empty();
    
    // Update file input label
    $(this).next('.custom-file-label').html(files.length > 1 ? `${files.length} files selected` : files[0].name);
    
    // Generate previews for each file
    Array.from(files).forEach(file => {
      const reader = new FileReader();
      const fileType = file.type;
      
      reader.onload = function(e) {
        let preview;
        
        if (fileType.startsWith('image/')) {
          // Image preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <img src="${e.target.result}" class="card-img-top" alt="${file.name}" style="height: 100px; object-fit: cover;">
                <div class="card-body p-2">
                  <p class="card-text small text-truncate">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        } else if (fileType === 'application/pdf') {
          // PDF preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <div class="card-body p-2 text-center">
                  <i class="far fa-file-pdf fa-3x text-danger"></i>
                  <p class="card-text small text-truncate mt-2">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        } else {
          // Generic file preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <div class="card-body p-2 text-center">
                  <i class="far fa-file fa-3x"></i>
                  <p class="card-text small text-truncate mt-2">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        }
        
        previewContainer.append(preview);
      };
      
      if (fileType.startsWith('image/')) {
        reader.readAsDataURL(file);
      } else {
        reader.readAsText(file); // Just to trigger onload for non-image files
      }
    });
  });
  
  // Handle edit car document file selection
  $(document).on('change', '#editCarDocuments', function(e) {
    const files = e.target.files;
    
    // Update file input label
    $(this).next('.custom-file-label').html(files.length > 1 ? `${files.length} files selected` : files[0].name);
  });
  
  // Add Car form submission
  $('#addCarForm').submit(function(e) {
    e.preventDefault();
    
    // Create FormData object to handle file uploads
    const formData = new FormData(this);
    
    $.ajax({
      url: '/api/cars',
      type: 'POST',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
        alert('Car added successfully');
        $('#addCarForm')[0].reset();
        $('#carDocumentPreview').empty();
        $('.custom-file-label').html('Choose documents...');
        updateCarsTable();
      },
      error: function(error) {
        console.error('Error adding car:', error);
        alert('Failed to add car: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // View/Edit Car button click
  $(document).on('click', '.view-car-btn', function() {
    const carId = $(this).data('id');
    
    // Fetch car details
    $.get(`/api/cars/${carId}`, function(car) {
      // Populate form fields
      $('#editCarId').val(car._id);
      $('#editMake').val(car.make);
      $('#editModel').val(car.model);
      $('#editYear').val(car.year);
      $('#editMileage').val(car.mileage);
      $('#editRegistration').val(car.registration || '');
      
      // Owner information
      $('#editOwnerName').val(car.owner ? car.owner.name || '' : '');
      $('#editOwnerContact').val(car.owner ? car.owner.contact || '' : '');
      $('#editOwnerEmail').val(car.owner ? car.owner.email || '' : '');
      
      // Update owner information display
      updateOwnerInfoDisplay(car);
      
      // Notes
      $('#editNotes').val(car.notes || '');
      
      // Set default date for quick reminder to tomorrow
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      $('#quickReminderDate').val(tomorrow.toISOString().split('T')[0]);
      
      // Load car-specific reminders
      loadCarReminders(car._id);
      
      // Load documents
      loadCarDocuments(car);
      
      // Show modal
      $('#carDetailsModal').modal('show');
    }).fail(function(error) {
      console.error('Error fetching car details:', error);
      alert('Failed to load car details');
    });
  });
  
  // Load reminders for a specific car
  function loadCarReminders(carId) {
    $.get(`/api/reminders?carId=${carId}`, function(reminders) {
      const tbody = $('#carRemindersTable tbody');
      tbody.empty();
      
      if (reminders.length === 0) {
        tbody.html('<tr><td colspan="6" class="text-center">No reminders for this car</td></tr>');
        return;
      }
      
      reminders.forEach(reminder => {
        const dueDate = new Date(reminder.date).toLocaleDateString('en-GB');
        const now = new Date();
        const reminderDate = new Date(reminder.date);
        
        // Determine status class
        let statusClass = 'secondary';
        let statusText = 'Upcoming';
        
        if (reminder.completed) {
          statusClass = 'success';
          statusText = 'Completed';
        } else if (reminderDate < now) {
          statusClass = 'danger';
          statusText = 'Overdue';
        } else if (reminderDate < new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)) {
          statusClass = 'warning';
          statusText = 'Due Soon';
        }
        
        // Determine priority class
        let priorityClass = 'secondary';
        if (reminder.priority === 'high') {
          priorityClass = 'danger';
        } else if (reminder.priority === 'medium') {
          priorityClass = 'warning';
        } else if (reminder.priority === 'low') {
          priorityClass = 'info';
        }
        
        tbody.append(`
          <tr>
            <td>${reminder.title}</td>
            <td>${reminder.category.charAt(0).toUpperCase() + reminder.category.slice(1)}</td>
            <td>${dueDate}</td>
            <td><span class="badge badge-${priorityClass}">${reminder.priority.charAt(0).toUpperCase() + reminder.priority.slice(1)}</span></td>
            <td><span class="badge badge-${statusClass}">${statusText}</span></td>
            <td>
              <button class="btn btn-sm btn-info edit-car-reminder-btn" data-id="${reminder._id}">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-sm btn-success complete-car-reminder-btn" data-id="${reminder._id}" ${reminder.completed ? 'disabled' : ''}>
                <i class="fas fa-check"></i>
              </button>
              <button class="btn btn-sm btn-danger delete-car-reminder-btn" data-id="${reminder._id}">
                <i class="fas fa-trash"></i>
              </button>
            </td>
          </tr>
        `);
      });
    }).fail(function(error) {
      console.error('Error loading car reminders:', error);
      $('#carRemindersTable tbody').html('<tr><td colspan="6" class="text-center">Failed to load reminders</td></tr>');
    });
  }
  
  // Add Car Reminder button click
  $(document).on('click', '#addCarReminderBtn', function() {
    // Reset form
    $('#reminderForm')[0].reset();
    $('#reminderId').val('');
    
    // Set default date to today
    const today = new Date().toISOString().split('T')[0];
    $('#reminderDate').val(today);
    
    // Set type to car and select the current car
    $('#reminderType').val('car');
    $('#reminderCarId').val($('#editCarId').val());
    
    // Show car-related fields
    $('.car-related-field').show();
    
    // Hide completed field for new reminders
    $('.completed-field').hide();
    
    // Update modal title
    $('#reminderModalLabel').text('Add Car Reminder');
    
    // Load cars for the dropdown
    loadCarsForReminders();
    
    // Show modal
    $('#reminderModal').modal('show');
  });
  
  // Edit Car Reminder button click
  $(document).on('click', '.edit-car-reminder-btn', function() {
    const reminderId = $(this).data('id');
    
    // Get reminder details
    $.get(`/api/reminders/${reminderId}`, function(reminder) {
      // Populate form
      $('#reminderId').val(reminder._id);
      $('#reminderTitle').val(reminder.title);
      $('#reminderDate').val(new Date(reminder.date).toISOString().split('T')[0]);
      $('#reminderType').val(reminder.type);
      $('#reminderCategory').val(reminder.category);
      $('#reminderPriority').val(reminder.priority);
      $('#reminderDescription').val(reminder.description);
      $('#reminderNotes').val(reminder.notes);
      $('#reminderCompleted').prop('checked', reminder.completed);
      
      // Show car selection and set to current car
      $('.car-related-field').show();
      $('#reminderCarId').val(reminder.carId || '');
      
      // Show completed field for existing reminders
      $('.completed-field').show();
      
      // Update modal title
      $('#reminderModalLabel').text('Edit Car Reminder');
      
      // Load cars for the dropdown
      loadCarsForReminders();
      
      // Show modal
      $('#reminderModal').modal('show');
    }).fail(function(error) {
      console.error('Error loading reminder details:', error);
      alert('Failed to load reminder details');
    });
  });
  
  // Complete Car Reminder button click
  $(document).on('click', '.complete-car-reminder-btn', function() {
    const reminderId = $(this).data('id');
    
    if (confirm('Mark this reminder as completed?')) {
      $.ajax({
        url: `/api/reminders/${reminderId}/complete`,
        type: 'POST',
        success: function(response) {
          alert('Reminder marked as completed');
          loadCarReminders($('#editCarId').val());
        },
        error: function(error) {
          console.error('Error completing reminder:', error);
          alert('Failed to complete reminder');
        }
      });
    }
  });
  
  // Delete Car Reminder button click
  $(document).on('click', '.delete-car-reminder-btn', function() {
    const reminderId = $(this).data('id');
    
    if (confirm('Are you sure you want to delete this reminder?')) {
      $.ajax({
        url: `/api/reminders/${reminderId}`,
        type: 'DELETE',
        success: function(response) {
          alert('Reminder deleted successfully');
          loadCarReminders($('#editCarId').val());
        },
        error: function(error) {
          console.error('Error deleting reminder:', error);
          alert('Failed to delete reminder');
        }
      });
    }
  });
  
  // Handle Save Reminder button click - Update to refresh car reminders if needed
  $(document).on('click', '#saveReminderBtn', function() {
    // Validate form
    if (!$('#reminderTitle').val() || !$('#reminderDate').val()) {
      alert('Please fill in all required fields');
      return;
    }
    
    const reminderId = $('#reminderId').val();
    const formData = {
      title: $('#reminderTitle').val(),
      date: $('#reminderDate').val(),
      type: $('#reminderType').val(),
      category: $('#reminderCategory').val(),
      priority: $('#reminderPriority').val(),
      description: $('#reminderDescription').val(),
      notes: $('#reminderNotes').val()
    };
    
    // Add car ID if type is car and a car is selected
    if ($('#reminderType').val() === 'car' && $('#reminderCarId').val()) {
      formData.carId = $('#reminderCarId').val();
    }
    
    // Add completed status for existing reminders
    if (reminderId) {
      formData.completed = $('#reminderCompleted').is(':checked');
    }
    
    // Create or update reminder
    const url = reminderId ? `/api/reminders/${reminderId}` : '/api/reminders';
    const method = reminderId ? 'PUT' : 'POST';
    
    $.ajax({
      url: url,
      type: method,
      data: formData,
      success: function(response) {
        alert(reminderId ? 'Reminder updated successfully' : 'Reminder created successfully');
        $('#reminderModal').modal('hide');
        
        // Refresh reminders list
        loadReminders();
        
        // If we're in the car details modal, also refresh car reminders
        if ($('#carDetailsModal').hasClass('show')) {
          loadCarReminders($('#editCarId').val());
        }
      },
      error: function(error) {
        console.error('Error saving reminder:', error);
        alert('Failed to save reminder: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Load custom reminders for a car
  function loadCustomReminders(car) {
    const container = $('#customRemindersContainer');
    container.empty();
    
    if (!car.reminders || car.reminders.length === 0) {
      container.html('<p class="text-muted">No custom reminders</p>');
      return;
    }
    
    let html = '<div class="list-group">';
    
    car.reminders.forEach(reminder => {
      const date = new Date(reminder.date).toLocaleDateString('en-GB');
      const now = new Date();
      const reminderDate = new Date(reminder.date);
      
      let statusClass = 'secondary';
      if (reminderDate < now) {
        statusClass = 'danger';
      } else if (reminderDate < new Date(now.getTime() + 30 * 24 * 60 * 60 * 1000)) {
        statusClass = 'warning';
      }
      
      html += `
        <div class="list-group-item d-flex justify-content-between align-items-center">
          <div>
            <span class="badge badge-${statusClass} mr-2">${reminder.type}</span>
            ${reminder.message}
            <br>
            <small>Due: ${date}</small>
          </div>
          <div>
            <button type="button" class="btn btn-sm btn-outline-primary edit-reminder-btn" 
              data-id="${reminder._id}" data-type="${reminder.type}" 
              data-date="${new Date(reminder.date).toISOString().split('T')[0]}" 
              data-message="${reminder.message}" data-completed="${reminder.completed}">
              Edit
            </button>
            <button type="button" class="btn btn-sm btn-outline-danger delete-reminder-btn" 
              data-id="${reminder._id}">
              Delete
            </button>
          </div>
        </div>
      `;
    });
    
    html += '</div>';
    container.html(html);
  }
  
  // Load car documents
  function loadCarDocuments(car) {
    const container = $('#existingDocumentsContainer');
    container.empty();
    
    if (!car.documents || car.documents.length === 0) {
      container.html('<p class="text-muted">No documents uploaded</p>');
      return;
    }
    
    car.documents.forEach(doc => {
      let preview;
      
      if (doc.contentType && doc.contentType.startsWith('image/')) {
        // Image preview
        preview = `
          <div class="col-md-3 mb-3">
            <div class="card">
              <img src="${doc.url}" class="card-img-top" alt="${doc.name}" style="height: 100px; object-fit: cover;">
              <div class="card-body p-2">
                <p class="card-text small text-truncate">${doc.name}</p>
                <div class="btn-group btn-group-sm w-100">
                  <a href="${doc.url}" target="_blank" class="btn btn-sm btn-outline-primary">View</a>
                  <button type="button" class="btn btn-sm btn-outline-danger delete-document-btn" data-id="${doc._id}">Delete</button>
                </div>
              </div>
            </div>
          </div>
        `;
      } else if (doc.contentType === 'application/pdf') {
        // PDF preview
        preview = `
          <div class="col-md-3 mb-3">
            <div class="card">
              <div class="card-body p-2 text-center">
                <i class="far fa-file-pdf fa-3x text-danger"></i>
                <p class="card-text small text-truncate mt-2">${doc.name}</p>
                <div class="btn-group btn-group-sm w-100">
                  <a href="${doc.url}" target="_blank" class="btn btn-sm btn-outline-primary">View</a>
                  <button type="button" class="btn btn-sm btn-outline-danger delete-document-btn" data-id="${doc._id}">Delete</button>
                </div>
              </div>
            </div>
          </div>
        `;
      } else {
        // Generic file preview
        preview = `
          <div class="col-md-3 mb-3">
            <div class="card">
              <div class="card-body p-2 text-center">
                <i class="far fa-file fa-3x"></i>
                <p class="card-text small text-truncate mt-2">${doc.name}</p>
                <div class="btn-group btn-group-sm w-100">
                  <a href="${doc.url}" target="_blank" class="btn btn-sm btn-outline-primary">View</a>
                  <button type="button" class="btn btn-sm btn-outline-danger delete-document-btn" data-id="${doc._id}">Delete</button>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      container.append(preview);
    });
  }
  
  // Edit Car form submission
  $('#editCarForm').submit(function(e) {
    e.preventDefault();
    
    const carId = $('#editCarId').val();
    
    // Create FormData object to handle file uploads
    const formData = new FormData(this);
    
    $.ajax({
      url: `/api/cars/${carId}`,
      type: 'PUT',
      data: formData,
      processData: false,
      contentType: false,
      success: function(response) {
        alert('Car updated successfully');
        $('#carDetailsModal').modal('hide');
        updateCarsTable();
      },
      error: function(error) {
        console.error('Error updating car:', error);
        alert('Failed to update car: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Delete Car button click
  $(document).on('click', '.delete-car-btn', function() {
    if (!confirm('Are you sure you want to delete this car?')) {
      return;
    }
    
    const carId = $(this).data('id');
    
    $.ajax({
      url: `/api/cars/${carId}`,
      type: 'DELETE',
      success: function(response) {
        alert('Car deleted successfully');
        updateCarsTable();
      },
      error: function(error) {
        console.error('Error deleting car:', error);
        alert('Failed to delete car: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Delete Document button click
  $(document).on('click', '.delete-document-btn', function() {
    if (!confirm('Are you sure you want to delete this document?')) {
      return;
    }
    
    const docId = $(this).data('id');
    const carId = $('#editCarId').val();
    
    $.ajax({
      url: `/api/cars/${carId}/documents/${docId}`,
      type: 'DELETE',
      success: function(response) {
        alert('Document deleted successfully');
        
        // Refresh car details
        $.get(`/api/cars/${carId}`, function(car) {
          loadCarDocuments(car);
        });
      },
      error: function(error) {
        console.error('Error deleting document:', error);
        alert('Failed to delete document: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Add Custom Reminder button click
  $(document).on('click', '#addCustomReminderBtn', function() {
    const carId = $('#editCarId').val();
    $('#customReminderCarId').val(carId);
    $('#customReminderForm')[0].reset();
    $('#addCustomReminderModal').modal('show');
  });
  
  // Save Custom Reminder button click
  $(document).on('click', '#saveCustomReminderBtn', function() {
    const carId = $('#customReminderCarId').val();
    const reminderId = $(this).data('reminder-id');
    const completed = $(this).data('completed') === true;
    
    // Validate form
    if (!$('#customReminderDate').val() || !$('#customReminderMessage').val()) {
      alert('Please fill in all required fields');
      return;
    }
    
    const data = {
      type: $('#customReminderType').val(),
      date: $('#customReminderDate').val(),
      message: $('#customReminderMessage').val(),
      completed: completed
    };
    
    // Create or update reminder
    const url = reminderId ? 
      `/api/cars/${carId}/reminders/${reminderId}` : 
      `/api/cars/${carId}/reminders`;
    
    const method = reminderId ? 'PUT' : 'POST';
    
    $.ajax({
      url: url,
      type: method,
      data: data,
      success: function(response) {
        alert(reminderId ? 'Reminder updated successfully' : 'Reminder added successfully');
        $('#addCustomReminderModal').modal('hide');
        
        // Refresh car details
        $.get(`/api/cars/${carId}`, function(car) {
          loadCustomReminders(car);
        });
      },
      error: function(error) {
        console.error('Error saving reminder:', error);
        alert('Failed to save reminder: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Edit Custom Reminder button click
  $(document).on('click', '.edit-reminder-btn', function() {
    const reminderId = $(this).data('id');
    const type = $(this).data('type');
    const date = $(this).data('date');
    const message = $(this).data('message');
    const completed = $(this).data('completed') === 'true';
    const carId = $('#editCarId').val();
    
    // Populate form
    $('#customReminderCarId').val(carId);
    $('#customReminderType').val(type);
    $('#customReminderDate').val(date);
    $('#customReminderMessage').val(message);
    
    // Store reminder ID and completed status in the save button
    $('#saveCustomReminderBtn').data('reminder-id', reminderId);
    $('#saveCustomReminderBtn').data('completed', completed);
    
    // Update modal title and button text
    $('#addCustomReminderModalLabel').text('Edit Custom Reminder');
    $('#saveCustomReminderBtn').text('Update Reminder');
    
    // Show modal
    $('#addCustomReminderModal').modal('show');
  });
  
  // Delete Reminder button click
  $(document).on('click', '.delete-reminder-btn', function() {
    if (!confirm('Are you sure you want to delete this reminder?')) {
      return;
    }
    
    const reminderId = $(this).data('id');
    const carId = $('#editCarId').val();
    
    $.ajax({
      url: `/api/cars/${carId}/reminders/${reminderId}`,
      type: 'DELETE',
      success: function(response) {
        alert('Reminder deleted successfully');
        
        // Refresh car details
        $.get(`/api/cars/${carId}`, function(car) {
          loadCustomReminders(car);
        });
      },
      error: function(error) {
        console.error('Error deleting reminder:', error);
        alert('Failed to delete reminder: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Reset custom reminder form when modal is hidden
  $('#addCustomReminderModal').on('hidden.bs.modal', function() {
    $('#customReminderForm')[0].reset();
    $('#saveCustomReminderBtn').removeData('reminder-id');
    $('#saveCustomReminderBtn').removeData('completed');
    $('#saveCustomReminderBtn').text('Save Reminder');
    $('#addCustomReminderModalLabel').text('Add Custom Reminder');
  });

  // Reminders functionality
  
  // Load all reminders with optional filtering
  function loadReminders(filters = {}) {
    let url = '/api/reminders';
    
    // Add query parameters for filtering
    if (Object.keys(filters).length > 0) {
      const queryParams = new URLSearchParams();
      
      if (filters.type && filters.type !== 'all') queryParams.append('type', filters.type);
      if (filters.category && filters.category !== 'all') queryParams.append('category', filters.category);
      if (filters.completed !== undefined) queryParams.append('completed', filters.completed);
      if (filters.carId) queryParams.append('carId', filters.carId);
      if (filters.search) queryParams.append('search', filters.search);
      
      url += '?' + queryParams.toString();
    }
    
    $.get(url, function(reminders) {
      // Clear existing table
      $('#remindersTable tbody').empty();
      
      if (reminders.length === 0) {
        $('#remindersTable tbody').html('<tr><td colspan="8" class="text-center">No reminders found</td></tr>');
        return;
      }
      
      // Populate reminders table
      reminders.forEach(reminder => {
        const dueDate = new Date(reminder.date).toLocaleDateString('en-GB');
        const now = new Date();
        const reminderDate = new Date(reminder.date);
        
        // Determine status class
        let statusClass = 'secondary';
        let statusText = reminder.completed ? 'Completed' : 'Pending';
        
        if (!reminder.completed) {
          if (reminderDate < now) {
            statusClass = 'danger';
            statusText = 'Overdue';
          } else if (reminderDate < new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)) {
            statusClass = 'warning';
            statusText = 'Due Soon';
          }
        }
        
        // Format related to field
        let relatedTo = 'N/A';
        if (reminder.carId && reminder.carDetails) {
          relatedTo = `${reminder.carDetails.make} ${reminder.carDetails.model} (${reminder.carDetails.registration || reminder.carDetails.year})`;
        }
        
        // Format priority
        const priorityClass = {
          'high': 'danger',
          'medium': 'warning',
          'low': 'info'
        }[reminder.priority] || 'secondary';
        
        // Add row to table
        $('#remindersTable tbody').append(`
          <tr>
            <td>${reminder.title}</td>
            <td>${reminder.type.charAt(0).toUpperCase() + reminder.type.slice(1)}</td>
            <td>${reminder.category.charAt(0).toUpperCase() + reminder.category.slice(1)}</td>
            <td>${dueDate}</td>
            <td><span class="badge badge-${priorityClass}">${reminder.priority.charAt(0).toUpperCase() + reminder.priority.slice(1)}</span></td>
            <td><span class="badge badge-${statusClass}">${statusText}</span></td>
            <td>${relatedTo}</td>
            <td>
              <button class="btn btn-sm btn-info edit-reminder-btn" data-id="${reminder._id}">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-sm btn-success complete-reminder-btn" data-id="${reminder._id}" ${reminder.completed ? 'disabled' : ''}>
                <i class="fas fa-check"></i>
              </button>
              <button class="btn btn-sm btn-danger delete-reminder-btn" data-id="${reminder._id}">
                <i class="fas fa-trash"></i>
              </button>
            </td>
          </tr>
        `);
      });
    }).fail(function(error) {
      console.error('Error loading reminders:', error);
      $('#remindersTable tbody').html('<tr><td colspan="8" class="text-center">Failed to load reminders</td></tr>');
    });
    
    // Load upcoming reminders (next 7 days)
    loadUpcomingReminders(7, '#upcomingRemindersShort');
    
    // Load this month's reminders
    loadUpcomingReminders(30, '#upcomingRemindersMonth');
  }
  
  // Load upcoming reminders for a specific time period
  function loadUpcomingReminders(days, containerId) {
    $.get(`/api/reminders/upcoming?days=${days}`, function(reminders) {
      const container = $(containerId);
      
      if (reminders.length === 0) {
        container.html('<div class="alert alert-info">No upcoming reminders</div>');
        return;
      }
      
      let html = '<div class="list-group">';
      
      reminders.forEach(reminder => {
        const daysText = reminder.daysRemaining === 1 ? 'day' : 'days';
        const reminderClass = reminder.daysRemaining <= 3 ? 'list-group-item-danger' : 'list-group-item-warning';
        
        // Format related to field
        let relatedTo = '';
        if (reminder.carId && reminder.carDetails) {
          relatedTo = `<br><small>Car: ${reminder.carDetails.make} ${reminder.carDetails.model} (${reminder.carDetails.registration || reminder.carDetails.year})</small>`;
        }
        
        html += `
          <div class="list-group-item ${reminderClass} d-flex justify-content-between align-items-center">
            <div>
              <strong>${reminder.title}</strong>
              <br>
              <small>Due date: ${new Date(reminder.date).toLocaleDateString('en-GB')}</small>
              ${relatedTo}
            </div>
            <span class="badge badge-pill badge-warning">${reminder.daysRemaining} ${daysText}</span>
          </div>
        `;
      });
      
      html += '</div>';
      container.html(html);
    }).fail(function(error) {
      console.error('Error loading upcoming reminders:', error);
      $(containerId).html('<div class="alert alert-danger">Failed to load reminders</div>');
    });
  }
  
  // Load cars for the reminder form
  function loadCarsForReminders() {
    $.get('/api/cars', function(cars) {
      // Clear existing options
      $('#reminderCarId').empty();
      
      // Add default option
      $('#reminderCarId').append('<option value="">-- Select a Car --</option>');
      
      // Add car options
      cars.forEach(car => {
        $('#reminderCarId').append(`<option value="${car._id}">${car.make} ${car.model} (${car.registration || car.year})</option>`);
      });
    }).fail(function(error) {
      console.error('Error loading cars for reminders:', error);
    });
  }

  // Handle view documents button click
  $(document).on('click', '.view-documents-btn', function() {
    const rentalId = $(this).data('id');
    
    // Fetch rental documents
    $.get(`/api/rentals/${rentalId}/documents`, function(documents) {
      const modalBody = $('#viewDocumentsModal .modal-body');
      modalBody.empty();
      
      if (documents.length === 0) {
        modalBody.html('<p class="text-center">No documents available</p>');
      } else {
        const documentsRow = $('<div class="row"></div>');
        
        documents.forEach(doc => {
          let docElement;
          
          if (doc.contentType && doc.contentType.startsWith('image/')) {
            // Image preview
            docElement = `
              <div class="col-md-4 mb-3">
                <div class="card">
                  <img src="${doc.url}" class="card-img-top" alt="${doc.name}" style="height: 150px; object-fit: cover;">
                  <div class="card-body p-2">
                    <p class="card-text small text-truncate">${doc.name}</p>
                    <a href="${doc.url}" target="_blank" class="btn btn-sm btn-primary btn-block">View Full Size</a>
                  </div>
                </div>
              </div>
            `;
          } else if (doc.contentType === 'application/pdf') {
            // PDF preview
            docElement = `
              <div class="col-md-4 mb-3">
                <div class="card">
                  <div class="card-body p-2 text-center">
                    <i class="far fa-file-pdf fa-3x text-danger"></i>
                    <p class="card-text small text-truncate mt-2">${doc.name}</p>
                    <a href="${doc.url}" target="_blank" class="btn btn-sm btn-primary btn-block">View PDF</a>
                  </div>
                </div>
              </div>
            `;
          } else {
            // Generic file preview
            docElement = `
              <div class="col-md-4 mb-3">
                <div class="card">
                  <div class="card-body p-2 text-center">
                    <i class="far fa-file fa-3x"></i>
                    <p class="card-text small text-truncate mt-2">${doc.name}</p>
                    <a href="${doc.url}" target="_blank" class="btn btn-sm btn-primary btn-block">Download</a>
                  </div>
                </div>
              </div>
            `;
          }
          
          documentsRow.append(docElement);
        });
        
        modalBody.append(documentsRow);
      }
      
      // Show the modal
      $('#viewDocumentsModal').modal('show');
    }).fail(function(error) {
      console.error('Error fetching documents:', error);
      alert('Failed to load documents');
    });
  });

  // Handle filter buttons in Data tab
  $('#applyDataFilters').click(function() {
    loadData();
  });
  
  $('#resetDataFilters').click(function() {
    $('#dataStatusFilter').val('all');
    $('#dataSearchFilter').val('');
    loadData();
  });
  
  // Handle Export Data button
  $('#exportData').click(function() {
    // Get the current filtered data
    const rows = [];
    const headers = [];
    
    // Get headers
    $('#logsTable thead th').each(function() {
      headers.push($(this).text());
    });
    
    // Get data rows
    $('#logsTable tbody tr').each(function() {
      const row = [];
      $(this).find('td').each(function(index) {
        // Special handling for Documents & Notes column
        if (index === 9) {
          // Check if there are notes or documents
          const hasNotes = $(this).find('button.view-notes-btn').length > 0;
          const hasDocuments = $(this).find('button.view-documents-btn').length > 0;
          
          let text = 'None';
          if (hasNotes && hasDocuments) {
            text = 'Has notes and documents';
          } else if (hasNotes) {
            text = 'Has notes';
          } else if (hasDocuments) {
            text = 'Has documents';
          }
          
          row.push(text);
        } else {
          row.push($(this).text().trim());
        }
      });
      rows.push(row);
    });
    
    // Create CSV content
    let csvContent = headers.join(',') + '\n';
    rows.forEach(row => {
      csvContent += row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',') + '\n';
    });
    
    // Create download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `rental_data_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  });

  // Handle document file input change for rental form
  $('#rentalDocuments').change(function() {
    const files = this.files;
    const previewContainer = $('#documentPreview');
    previewContainer.empty();
    
    if (files.length === 0) {
      return;
    }
    
    // Update file input label with count of selected files
    $(this).next('.custom-file-label').html(files.length > 1 ? `${files.length} files selected` : files[0].name);
    
    // Create previews for each file
    Array.from(files).forEach(file => {
      const reader = new FileReader();
      const fileType = file.type;
      
      reader.onload = function(e) {
        let preview;
        
        if (fileType.startsWith('image/')) {
          // Image preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <img src="${e.target.result}" class="card-img-top" alt="${file.name}" style="height: 100px; object-fit: cover;">
                <div class="card-body p-2">
                  <p class="card-text small text-truncate">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        } else if (fileType === 'application/pdf') {
          // PDF preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <div class="card-body p-2 text-center">
                  <i class="far fa-file-pdf fa-3x text-danger"></i>
                  <p class="card-text small text-truncate mt-2">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        } else {
          // Generic file preview
          preview = `
            <div class="col-md-3 mb-3">
              <div class="card">
                <div class="card-body p-2 text-center">
                  <i class="far fa-file fa-3x"></i>
                  <p class="card-text small text-truncate mt-2">${file.name}</p>
                </div>
              </div>
            </div>
          `;
        }
        
        previewContainer.append(preview);
      };
      
      if (fileType.startsWith('image/')) {
        reader.readAsDataURL(file);
      } else {
        reader.readAsText(file);
      }
    });
  });

  // Load settings from localStorage
  function loadSettings() {
    // Load global settings
    const settings = JSON.parse(localStorage.getItem('carRentalSettings')) || getDefaultSettings();
    
    // Populate form fields
    $('#currencySetting').val(settings.currency);
    $('#dateFormatSetting').val(settings.dateFormat);
    $('#timeFormatSetting').val(settings.timeFormat);
    $('#languageSetting').val(settings.language);
    $('#reminderDaysSetting').val(settings.reminderDays);
    $('#defaultRentalDurationSetting').val(settings.defaultRentalDuration);
    $('#darkModeSetting').prop('checked', settings.darkMode);
    $('#emailNotificationsSetting').prop('checked', settings.emailNotifications);
    
    // Load company info
    const companyInfo = JSON.parse(localStorage.getItem('carRentalCompanyInfo')) || {};
    $('#companyNameSetting').val(companyInfo.name || '');
    $('#companyPhoneSetting').val(companyInfo.phone || '');
    $('#companyEmailSetting').val(companyInfo.email || '');
    $('#companyWebsiteSetting').val(companyInfo.website || '');
    $('#companyAddressSetting').val(companyInfo.address || '');
    
    // Apply settings to the UI
    applySettings(settings);
  }

  // Get default settings
  function getDefaultSettings() {
    return {
      currency: '£',
      dateFormat: 'en-GB',
      timeFormat: '24h',
      language: 'en-GB',
      reminderDays: 7,
      defaultRentalDuration: 7,
      darkMode: false,
      emailNotifications: false
    };
  }

  // Apply settings to the UI
  function applySettings(settings) {
    // Apply currency symbol
    window.currencySymbol = settings.currency;
    console.log('Applied currency symbol:', window.currencySymbol);
    
    // Update all currency symbols in the UI
    $('.currency-symbol').text(window.currencySymbol);
    
    // Apply date format
    window.dateFormat = settings.dateFormat;
    
    // Apply time format
    window.timeFormat = settings.timeFormat;
    
    // Apply dark mode if enabled
    if (settings.darkMode) {
      $('body').addClass('dark-mode');
    } else {
      $('body').removeClass('dark-mode');
    }
  }

  // Handle global settings form submission
  $('#globalSettingsForm').submit(function(e) {
    e.preventDefault();
    
    // Get form values
    const settings = {
      currency: $('#currencySetting').val(),
      dateFormat: $('#dateFormatSetting').val(),
      timeFormat: $('#timeFormatSetting').val(),
      language: $('#languageSetting').val(),
      reminderDays: parseInt($('#reminderDaysSetting').val()),
      defaultRentalDuration: parseInt($('#defaultRentalDurationSetting').val()),
      darkMode: $('#darkModeSetting').is(':checked'),
      emailNotifications: $('#emailNotificationsSetting').is(':checked')
    };
    
    // Save settings to localStorage
    localStorage.setItem('carRentalSettings', JSON.stringify(settings));
    
    // Apply settings to the UI
    applySettings(settings);
    
    // Show success message
    alert('Settings saved successfully!');
  });

  // Handle company info form submission
  $('#companyInfoForm').submit(function(e) {
    e.preventDefault();
    
    // Get form values
    const companyInfo = {
      name: $('#companyNameSetting').val(),
      phone: $('#companyPhoneSetting').val(),
      email: $('#companyEmailSetting').val(),
      website: $('#companyWebsiteSetting').val(),
      address: $('#companyAddressSetting').val()
    };
    
    // Save company info to localStorage
    localStorage.setItem('carRentalCompanyInfo', JSON.stringify(companyInfo));
    
    // Show success message
    alert('Company information saved successfully!');
  });

  // Handle backup data button click
  $('#backupDataBtn').click(function() {
    // Get all data from localStorage
    const backup = {
      settings: JSON.parse(localStorage.getItem('carRentalSettings')) || getDefaultSettings(),
      companyInfo: JSON.parse(localStorage.getItem('carRentalCompanyInfo')) || {}
    };
    
    // Convert to JSON string
    const backupJson = JSON.stringify(backup);
    
    // Create a blob and download link
    const blob = new Blob([backupJson], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `car_rental_backup_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  });

  // Handle restore data button click
  $('#restoreDataBtn').click(function() {
    const fileInput = $('#restoreFileSetting')[0];
    
    if (fileInput.files.length === 0) {
      alert('Please select a backup file to restore.');
      return;
    }
    
    const file = fileInput.files[0];
    const reader = new FileReader();
    
    reader.onload = function(e) {
      try {
        const backup = JSON.parse(e.target.result);
        
        // Restore settings
        if (backup.settings) {
          localStorage.setItem('carRentalSettings', JSON.stringify(backup.settings));
        }
        
        // Restore company info
        if (backup.companyInfo) {
          localStorage.setItem('carRentalCompanyInfo', JSON.stringify(backup.companyInfo));
        }
        
        // Reload settings
        loadSettings();
        
        // Show success message
        alert('Data restored successfully! The page will now reload to apply all settings.');
        
        // Reload the page to apply all settings
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } catch (error) {
        console.error('Error restoring backup:', error);
        alert('Failed to restore backup. The file may be corrupted or in an invalid format.');
      }
    };
    
    reader.readAsText(file);
  });

  // Initialize settings on page load
  $(document).ready(function() {
    const settings = JSON.parse(localStorage.getItem('carRentalSettings')) || getDefaultSettings();
    applySettings(settings);
  });

  // Update owner information display
  function updateOwnerInfoDisplay(car) {
    $('#ownerNameDisplay').text(car.owner && car.owner.name ? car.owner.name : '-');
    $('#ownerContactDisplay').text(car.owner && car.owner.contact ? car.owner.contact : '-');
    $('#ownerEmailDisplay').text(car.owner && car.owner.email ? car.owner.email : '-');
  }

  // Handle quick reminder add button click
  $(document).on('click', '#addQuickReminderBtn', function() {
    const carId = $('#editCarId').val();
    const message = $('#quickReminderMessage').val().trim();
    const date = $('#quickReminderDate').val();
    
    if (!message) {
      alert('Please enter a reminder message');
      return;
    }
    
    if (!date) {
      alert('Please select a due date');
      return;
    }
    
    // Create reminder data
    const reminderData = {
      title: message,
      description: message,
      date: date,
      type: 'car',
      category: 'custom',
      priority: 'medium',
      carId: carId
    };
    
    // Send request to create reminder
    $.ajax({
      url: '/api/reminders',
      type: 'POST',
      data: reminderData,
      success: function(response) {
        // Clear form fields
        $('#quickReminderMessage').val('');
        
        // Set default date to tomorrow
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        $('#quickReminderDate').val(tomorrow.toISOString().split('T')[0]);
        
        // Reload car reminders
        loadCarReminders(carId);
        
        // Show success message
        alert('Reminder added successfully!');
      },
      error: function(error) {
        console.error('Error adding reminder:', error);
        alert('Failed to add reminder: ' + (error.responseJSON ? error.responseJSON.error : 'Unknown error'));
      }
    });
  });
  
  // Update owner information display when owner fields change
  $(document).on('change', '#editOwnerName, #editOwnerContact, #editOwnerEmail', function() {
    const car = {
      owner: {
        name: $('#editOwnerName').val(),
        contact: $('#editOwnerContact').val(),
        email: $('#editOwnerEmail').val()
      }
    };
    updateOwnerInfoDisplay(car);
  });

  // Format currency
  function formatCurrency(amount) {
    if (!amount) return `${window.currencySymbol}0.00`;
    return `${window.currencySymbol}${parseFloat(amount).toFixed(2)}`;
  }

  // Format date
  function formatDate(date) {
    return new Date(date).toLocaleString('en-GB');
  }

  // Handle View Notes button click
  $(document).on('click', '.view-notes-btn', function() {
    const rentalId = $(this).data('id');
    
    // Show loading indicator
    $('#notesContent').html('<div class="text-center"><div class="spinner-border" role="status"></div><p class="mt-2">Loading notes...</p></div>');
    $('#viewNotesModal').modal('show');
    
    console.log('Fetching notes for rental:', rentalId);
    
    // Fetch notes from API
    $.ajax({
      url: `/api/rentals/${rentalId}/notes`,
      type: 'GET',
      success: function(response) {
        console.log('Notes response:', response);
        
        const notes = Array.isArray(response) ? response : [];
        
        if (!notes || notes.length === 0) {
          $('#notesContent').html('<p class="text-muted text-center">No notes available for this rental.</p>');
        } else {
          // Format notes with timestamps and authors
          let notesHtml = '';
          
          notes.forEach(note => {
            const timestamp = new Date(note.timestamp).toLocaleString('en-GB');
            notesHtml += `
              <div class="card mb-3">
                <div class="card-header d-flex justify-content-between">
                  <strong>${note.author || 'User'}</strong>
                  <small class="text-muted">${timestamp}</small>
                </div>
                <div class="card-body">
                  <p class="card-text">${note.content}</p>
                </div>
              </div>
            `;
          });
          
          $('#notesContent').html(notesHtml);
        }
      },
      error: function(xhr, status, error) {
        console.error('Error loading notes:', error);
        console.error('Status:', status);
        console.error('Response:', xhr.responseText);
        
        let errorMsg = 'Error loading notes. Please try again.';
        
        try {
          if (xhr.responseJSON && xhr.responseJSON.message) {
            errorMsg = xhr.responseJSON.message;
          } else if (xhr.responseText) {
            const response = JSON.parse(xhr.responseText);
            if (response.message) {
              errorMsg = response.message;
            }
          }
        } catch (e) {
          console.error('Error parsing error response:', e);
        }
        
        $('#notesContent').html(`<div class="alert alert-danger">${errorMsg}</div>`);
      }
    });
  });

  // Handle Add Notes button click
  $(document).on('click', '.add-notes-btn', function() {
    const rentalId = $(this).data('id');
    $('#notesRentalId').val(rentalId);
    $('#noteContent').val('');
    // Clear any previous error messages
    $('#noteError').hide();
    $('#addNotesModal').modal('show');
  });

  // Final initialization
  $(document).ready(function() {
    // Initial data load
    loadDashboard();
    
    // Set up event handlers for tabs
    setupTabHandlers();
  });
</script>
</body>
</html>
